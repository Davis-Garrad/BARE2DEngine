OrbitScreen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^class OrbitScreen : public BARE2D::Screen {$/;"	class	line:14	inherits:BARE2D::Screen
OrbitScreen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		OrbitScreen(BARE2D::Window* window, BARE2D::InputManager* input);$/;"	prototype	line:16	class:OrbitScreen	access:public	signature:(BARE2D::Window* window, BARE2D::InputManager* input)
~OrbitScreen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		~OrbitScreen();$/;"	prototype	line:17	class:OrbitScreen	access:public	signature:()
destroyScreen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		virtual void destroyScreen();$/;"	prototype	line:19	class:OrbitScreen	access:public	implementation:virtual	signature:()	returns:virtual void 
draw	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		virtual void draw();$/;"	prototype	line:20	class:OrbitScreen	access:public	implementation:virtual	signature:()	returns:virtual void 
getNextScreenIndex	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		virtual int getNextScreenIndex() const;$/;"	prototype	line:21	class:OrbitScreen	access:public	implementation:virtual	signature:() const	returns:virtual int 
initScreen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		virtual void initScreen();$/;"	prototype	line:22	class:OrbitScreen	access:public	implementation:virtual	signature:()	returns:virtual void 
onEntry	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		virtual void onEntry();$/;"	prototype	line:23	class:OrbitScreen	access:public	implementation:virtual	signature:()	returns:virtual void 
onExit	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		virtual void onExit();$/;"	prototype	line:24	class:OrbitScreen	access:public	implementation:virtual	signature:()	returns:virtual void 
update	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		virtual void update(double dt);$/;"	prototype	line:25	class:OrbitScreen	access:public	implementation:virtual	signature:(double dt)	returns:virtual void 
loadAssets	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		virtual void loadAssets();$/;"	prototype	line:28	class:OrbitScreen	access:private	implementation:virtual	signature:()	returns:virtual void 
m_bodies	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		std::vector<Body*> m_bodies;$/;"	member	line:30	class:OrbitScreen	access:private
m_lastMouse	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		glm::vec2 m_lastMouse;$/;"	member	line:32	class:OrbitScreen	access:private
m_renderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		BARE2D::BasicRenderer* m_renderer = nullptr;$/;"	member	line:34	class:OrbitScreen	access:private
m_regrenderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		BARE2D::BasicRenderer* m_regrenderer = nullptr;$/;"	member	line:35	class:OrbitScreen	access:private
m_debugRenderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		BARE2D::DebugRenderer* m_debugRenderer = nullptr;$/;"	member	line:36	class:OrbitScreen	access:private
m_window	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		BARE2D::Window* m_window;$/;"	member	line:37	class:OrbitScreen	access:private
m_planetTexture	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		BARE2D::Texture m_planetTexture;$/;"	member	line:38	class:OrbitScreen	access:private
m_starsTexture	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		BARE2D::Texture m_starsTexture;$/;"	member	line:39	class:OrbitScreen	access:private
m_input	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/OrbitScreen.hpp	/^		BARE2D::InputManager* m_input;$/;"	member	line:40	class:OrbitScreen	access:private
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^namespace BARE2D {$/;"	namespace	line:3
ScreenState	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^	enum class ScreenState {$/;"	cenum	line:5
RUNNING	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		RUNNING,$/;"	enumerator	line:6	cenum:BARE2D::ScreenState
CHANGE_NEXT	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		CHANGE_NEXT,$/;"	enumerator	line:7	cenum:BARE2D::ScreenState
CHANGE_PREV	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		CHANGE_PREV,$/;"	enumerator	line:8	cenum:BARE2D::ScreenState
EXIT_APPLICATION	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		EXIT_APPLICATION$/;"	enumerator	line:9	cenum:BARE2D::ScreenState
Screen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^	class Screen$/;"	class	line:16	namespace:BARE2D
Screen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		Screen();$/;"	prototype	line:19	class:BARE2D::Screen	access:public	signature:()
~Screen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		virtual ~Screen();$/;"	prototype	line:20	class:BARE2D::Screen	access:public	implementation:virtual	signature:()	returns:virtual 
initScreen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		virtual void initScreen() = 0;$/;"	prototype	line:25	class:BARE2D::Screen	access:public	implementation:pure virtual	signature:()	returns:virtual void 
destroyScreen	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		virtual void destroyScreen() = 0;$/;"	prototype	line:30	class:BARE2D::Screen	access:public	implementation:pure virtual	signature:()	returns:virtual void 
onEntry	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		virtual void onEntry() = 0;$/;"	prototype	line:35	class:BARE2D::Screen	access:public	implementation:pure virtual	signature:()	returns:virtual void 
onExit	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		virtual void onExit() = 0;$/;"	prototype	line:40	class:BARE2D::Screen	access:public	implementation:pure virtual	signature:()	returns:virtual void 
draw	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		virtual void draw() = 0;$/;"	prototype	line:45	class:BARE2D::Screen	access:public	implementation:pure virtual	signature:()	returns:virtual void 
update	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		virtual void update(double dt) = 0;$/;"	prototype	line:50	class:BARE2D::Screen	access:public	implementation:pure virtual	signature:(double dt)	returns:virtual void 
getNextScreenIndex	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		virtual int getNextScreenIndex() const = 0;$/;"	prototype	line:56	class:BARE2D::Screen	access:public	implementation:pure virtual	signature:() const	returns:virtual int 
getState	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		ScreenState getState();$/;"	prototype	line:61	class:BARE2D::Screen	access:public	signature:()	returns:ScreenState 
m_screenState	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Screen.hpp	/^		ScreenState m_screenState = ScreenState::RUNNING;$/;"	member	line:64	class:BARE2D::Screen	access:protected

glm	/usr/include/glm/ext/quaternion_transform.inl	/^namespace glm$/;"	namespace	line:1
rotate	/usr/include/glm/ext/quaternion_transform.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER qua<T, Q> rotate(qua<T, Q> const& q, T const& angle, vec<3, T, Q> const& v) $/;"	function	line:4	namespace:glm	signature:(qua<T, Q> const& q, T const& angle, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER qua <T, Q> 
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^namespace BARE2D$/;"	namespace	line:13
ResourceManager	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^	class ResourceManager$/;"	class	line:21	namespace:BARE2D
loadShaders	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static ShaderProgram loadShaders(std::string& vertShaderPath, std::string& fragShaderPath);$/;"	prototype	line:30	class:BARE2D::ResourceManager	access:public	signature:(std::string& vertShaderPath, std::string& fragShaderPath)	returns:ShaderProgram 
loadShadersFromSource	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static ShaderProgram loadShadersFromSource(std::string& vertShaderSource, std::string& fragShaderSource);$/;"	prototype	line:38	class:BARE2D::ResourceManager	access:public	signature:(std::string& vertShaderSource, std::string& fragShaderSource)	returns:ShaderProgram 
loadTexture	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Texture loadTexture(std::string& texturePath);$/;"	prototype	line:46	class:BARE2D::ResourceManager	access:public	signature:(std::string& texturePath)	returns:Texture 
setMutableTexture	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static MutableTexture* setMutableTexture(std::string& textureName, Texture& texture);$/;"	prototype	line:56	class:BARE2D::ResourceManager	access:public	signature:(std::string& textureName, Texture& texture)	returns:MutableTexture 
loadMutableTexture	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static MutableTexture* loadMutableTexture(std::string& textureName);$/;"	prototype	line:63	class:BARE2D::ResourceManager	access:public	signature:(std::string& textureName)	returns:MutableTexture 
loadSound	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Sound loadSound(std::string& soundPath);$/;"	prototype	line:70	class:BARE2D::ResourceManager	access:public	signature:(std::string& soundPath)	returns:Sound 
loadMusic	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Music loadMusic(std::string& musicPath);$/;"	prototype	line:77	class:BARE2D::ResourceManager	access:public	signature:(std::string& musicPath)	returns:Music 
loadScript	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static LuaScript loadScript(std::string& scriptPath);$/;"	prototype	line:84	class:BARE2D::ResourceManager	access:public	signature:(std::string& scriptPath)	returns:LuaScript 
loadScriptFromSource	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static LuaScript loadScriptFromSource(std::string& scriptSource, std::string name);$/;"	prototype	line:92	class:BARE2D::ResourceManager	access:public	signature:(std::string& scriptSource, std::string name)	returns:LuaScript 
loadFont	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Font loadFont(std::string& fontPath, int size);$/;"	prototype	line:100	class:BARE2D::ResourceManager	access:public	signature:(std::string& fontPath, int size)	returns:Font 
clearCaches	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static void clearCaches();$/;"	prototype	line:105	class:BARE2D::ResourceManager	access:public	signature:()	returns:void 
setAssetsPathPrefix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static void setAssetsPathPrefix(std::string prefix);$/;"	prototype	line:111	class:BARE2D::ResourceManager	access:public	signature:(std::string prefix)	returns:void 
getAssetsPathPrefix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static std::string getAssetsPathPrefix();$/;"	prototype	line:116	class:BARE2D::ResourceManager	access:public	signature:()	returns:std :: string 
setTexturePathPrefix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static void setTexturePathPrefix(std::string prefix);$/;"	prototype	line:122	class:BARE2D::ResourceManager	access:public	signature:(std::string prefix)	returns:void 
m_assetsPathPrefix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static std::string m_assetsPathPrefix;$/;"	member	line:125	class:BARE2D::ResourceManager	access:private
m_texturePathPrefix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static std::string m_texturePathPrefix;$/;"	member	line:126	class:BARE2D::ResourceManager	access:private
m_textures	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Cache<std::string, Texture>* m_textures;$/;"	member	line:128	class:BARE2D::ResourceManager	access:private
m_mutableTextures	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Cache<std::string, MutableTexture>* m_mutableTextures;$/;"	member	line:129	class:BARE2D::ResourceManager	access:private
m_sounds	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Cache<std::string, Sound>* m_sounds;$/;"	member	line:130	class:BARE2D::ResourceManager	access:private
m_music	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Cache<std::string, Music>* m_music;$/;"	member	line:131	class:BARE2D::ResourceManager	access:private
m_scripts	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Cache<std::string, LuaScript>* m_scripts;$/;"	member	line:132	class:BARE2D::ResourceManager	access:private
m_fonts	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ResourceManager.hpp	/^		static Cache<std::string, Font>* m_fonts;$/;"	member	line:133	class:BARE2D::ResourceManager	access:private

_LINUX_LIMITS_H	/usr/include/linux/limits.h	/^#define _LINUX_LIMITS_H$/;"	macro	line:3
NR_OPEN	/usr/include/linux/limits.h	/^#define NR_OPEN	        1024$/;"	macro	line:5
NGROUPS_MAX	/usr/include/linux/limits.h	/^#define NGROUPS_MAX    65536	\/* supplemental group IDs are available *\/$/;"	macro	line:7
ARG_MAX	/usr/include/linux/limits.h	/^#define ARG_MAX       131072	\/* # bytes of args + environ for exec() *\/$/;"	macro	line:8
LINK_MAX	/usr/include/linux/limits.h	/^#define LINK_MAX         127	\/* # links a file may have *\/$/;"	macro	line:9
MAX_CANON	/usr/include/linux/limits.h	/^#define MAX_CANON        255	\/* size of the canonical input queue *\/$/;"	macro	line:10
MAX_INPUT	/usr/include/linux/limits.h	/^#define MAX_INPUT        255	\/* size of the type-ahead buffer *\/$/;"	macro	line:11
NAME_MAX	/usr/include/linux/limits.h	/^#define NAME_MAX         255	\/* # chars in a file name *\/$/;"	macro	line:12
PATH_MAX	/usr/include/linux/limits.h	/^#define PATH_MAX        4096	\/* # chars in a path name including nul *\/$/;"	macro	line:13
PIPE_BUF	/usr/include/linux/limits.h	/^#define PIPE_BUF        4096	\/* # bytes in atomic write to a pipe *\/$/;"	macro	line:14
XATTR_NAME_MAX	/usr/include/linux/limits.h	/^#define XATTR_NAME_MAX   255	\/* # chars in an extended attribute name *\/$/;"	macro	line:15
XATTR_SIZE_MAX	/usr/include/linux/limits.h	/^#define XATTR_SIZE_MAX 65536	\/* size of an extended attribute value (64k) *\/$/;"	macro	line:16
XATTR_LIST_MAX	/usr/include/linux/limits.h	/^#define XATTR_LIST_MAX 65536	\/* size of extended attribute namelist (64k) *\/$/;"	macro	line:17
RTSIG_MAX	/usr/include/linux/limits.h	/^#define RTSIG_MAX	  32$/;"	macro	line:19
Body	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/Body.hpp	/^class Body$/;"	class	line:6
Body	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/Body.hpp	/^	Body(glm::vec2 position, glm::vec2 velocity, double m, double r);$/;"	prototype	line:9	class:Body	access:public	signature:(glm::vec2 position, glm::vec2 velocity, double m, double r)
~Body	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/Body.hpp	/^	~Body();$/;"	prototype	line:10	class:Body	access:public	signature:()
update	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/Body.hpp	/^	void update(std::vector<Body*> others);$/;"	prototype	line:12	class:Body	access:public	signature:(std::vector<Body*> others)	returns:void 
pos	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/Body.hpp	/^	glm::vec2 pos;$/;"	member	line:14	class:Body	access:public
vel	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/Body.hpp	/^	glm::vec2 vel;$/;"	member	line:15	class:Body	access:public
mass	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/Body.hpp	/^	double mass;$/;"	member	line:16	class:Body	access:public
radius	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/BARETests/Orbiter/Body.hpp	/^	double radius;$/;"	member	line:17	class:Body	access:public
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^namespace BARE2D {$/;"	namespace	line:5
VAO	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^	class VAO$/;"	class	line:11	namespace:BARE2D
VAO	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		VAO();$/;"	prototype	line:14	class:BARE2D::VAO	access:public	signature:()
~VAO	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		~VAO();$/;"	prototype	line:15	class:BARE2D::VAO	access:public	signature:()
init	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		void init();$/;"	prototype	line:20	class:BARE2D::VAO	access:public	signature:()	returns:void 
destroy	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		void destroy();$/;"	prototype	line:25	class:BARE2D::VAO	access:public	signature:()	returns:void 
bind	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		void bind();$/;"	prototype	line:30	class:BARE2D::VAO	access:public	signature:()	returns:void 
bindVBO	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		void bindVBO();$/;"	prototype	line:35	class:BARE2D::VAO	access:public	signature:()	returns:void 
unbind	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		void unbind();$/;"	prototype	line:40	class:BARE2D::VAO	access:public	signature:()	returns:void 
unbindVBO	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		void unbindVBO();$/;"	prototype	line:45	class:BARE2D::VAO	access:public	signature:()	returns:void 
addVertexAttribute	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		void addVertexAttribute(GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* data);$/;"	prototype	line:55	class:BARE2D::VAO	access:public	signature:(GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* data)	returns:void 
m_numAttributes	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		unsigned int m_numAttributes; \/\/ How many attributes we've added so far.$/;"	member	line:58	class:BARE2D::VAO	access:private
m_vaoHandle	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		GLuint m_vaoHandle; \/\/ The GL-provided handle for the VAO$/;"	member	line:60	class:BARE2D::VAO	access:private
m_vboHandle	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/VAO.hpp	/^		GLuint m_vboHandle; \/\/ The GL-provided handle for the VBO (Yes, there's only one. Each 'vertex' in the vertex buffer object combines all the data)$/;"	member	line:61	class:BARE2D::VAO	access:private
glm	/usr/include/glm/detail/type_vec4.inl	/^namespace glm{$/;"	namespace	line:5
detail	/usr/include/glm/detail/type_vec4.inl	/^namespace detail$/;"	namespace	line:6	namespace:glm
compute_vec4_add	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, bool Aligned> 	struct compute_vec4_add $/;"	struct	line:9	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:11	struct:glm::detail::compute_vec4_add	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_sub	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, bool Aligned> 	struct compute_vec4_sub $/;"	struct	line:18	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:20	struct:glm::detail::compute_vec4_sub	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_mul	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, bool Aligned> 	struct compute_vec4_mul $/;"	struct	line:27	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:29	struct:glm::detail::compute_vec4_mul	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_div	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, bool Aligned> 	struct compute_vec4_div $/;"	struct	line:36	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:38	struct:glm::detail::compute_vec4_div	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_mod	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, bool Aligned> 	struct compute_vec4_mod $/;"	struct	line:45	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:47	struct:glm::detail::compute_vec4_mod	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_and	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned> 	struct compute_vec4_and $/;"	struct	line:54	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:56	struct:glm::detail::compute_vec4_and	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_or	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned> 	struct compute_vec4_or $/;"	struct	line:63	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:65	struct:glm::detail::compute_vec4_or	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_xor	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned> 	struct compute_vec4_xor $/;"	struct	line:72	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:74	struct:glm::detail::compute_vec4_xor	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_shift_left	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned> 	struct compute_vec4_shift_left $/;"	struct	line:81	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:83	struct:glm::detail::compute_vec4_shift_left	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_shift_right	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned> 	struct compute_vec4_shift_right $/;"	struct	line:90	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:92	struct:glm::detail::compute_vec4_shift_right	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_equal	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned> 	struct compute_vec4_equal $/;"	struct	line:99	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)$/;"	function	line:101	struct:glm::detail::compute_vec4_equal	access:public	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:bool 
compute_vec4_nequal	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned> 	struct compute_vec4_nequal $/;"	struct	line:112	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)$/;"	function	line:114	struct:glm::detail::compute_vec4_nequal	access:public	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:bool 
compute_vec4_bitwise_not	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned> 	struct compute_vec4_bitwise_not $/;"	struct	line:121	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& v)$/;"	function	line:123	struct:glm::detail::compute_vec4_bitwise_not	access:public	signature:(vec<4, T, Q> const& v)	returns:vec <4, T, Q> 
vec	/usr/include/glm/detail/type_vec4.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec() $/;"	function	line:134	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, T, Q> const& v) $/;"	function	line:141	class:glm::vec	signature:(vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, T, P> const& v) $/;"	function	line:148	class:glm::vec	signature:(vec<4, T, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T scalar) $/;"	function	line:155	class:glm::vec	signature:(T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template <typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T _x, T _y, T _z, T _w) $/;"	function	line:160	class:glm::vec	signature:(T _x, T _y, T _z, T _w)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, U, P> const& v) $/;"	function	line:168	class:glm::vec	signature:(vec<1, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w) $/;"	function	line:177	class:glm::vec	signature:(X _x, Y _y, Z _z, W _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, W _w) $/;"	function	line:186	class:glm::vec	signature:(vec<1, X, Q> const& _x, Y _y, Z _z, W _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, W _w) $/;"	function	line:195	class:glm::vec	signature:(X _x, vec<1, Y, Q> const& _y, Z _z, W _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z, W _w) $/;"	function	line:204	class:glm::vec	signature:(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z, W _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, W _w) $/;"	function	line:213	class:glm::vec	signature:(X _x, Y _y, vec<1, Z, Q> const& _z, W _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z, W _w) $/;"	function	line:222	class:glm::vec	signature:(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z, W _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, W _w) $/;"	function	line:231	class:glm::vec	signature:(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, W _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, W _w) $/;"	function	line:240	class:glm::vec	signature:(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, W _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, vec<1, W, Q> const& _w) $/;"	function	line:249	class:glm::vec	signature:(vec<1, X, Q> const& _x, Y _y, Z _z, vec<1, W, Q> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W, Q> const& _w) $/;"	function	line:258	class:glm::vec	signature:(X _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W, Q> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W, Q> const& _w) $/;"	function	line:267	class:glm::vec	signature:(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W, Q> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w) $/;"	function	line:276	class:glm::vec	signature:(X _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w) $/;"	function	line:285	class:glm::vec	signature:(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w) $/;"	function	line:294	class:glm::vec	signature:(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z, typename W> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w) $/;"	function	line:303	class:glm::vec	signature:(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, C _w) $/;"	function	line:314	class:glm::vec	signature:(vec<2, A, P> const& _xy, B _z, C _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z, C _w) $/;"	function	line:323	class:glm::vec	signature:(vec<2, A, P> const& _xy, vec<1, B, P> const& _z, C _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, vec<1, C, P> const& _w) $/;"	function	line:332	class:glm::vec	signature:(vec<2, A, P> const& _xy, B _z, vec<1, C, P> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z, vec<1, C, P> const& _w) $/;"	function	line:341	class:glm::vec	signature:(vec<2, A, P> const& _xy, vec<1, B, P> const& _z, vec<1, C, P> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, C _w) $/;"	function	line:350	class:glm::vec	signature:(A _x, vec<2, B, P> const& _yz, C _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz, C _w) $/;"	function	line:359	class:glm::vec	signature:(vec<1, A, P> const& _x, vec<2, B, P> const& _yz, C _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, vec<1, C, P> const& _w) $/;"	function	line:368	class:glm::vec	signature:(A _x, vec<2, B, P> const& _yz, vec<1, C, P> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz, vec<1, C, P> const& _w) $/;"	function	line:377	class:glm::vec	signature:(vec<1, A, P> const& _x, vec<2, B, P> const& _yz, vec<1, C, P> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, B _y, vec<2, C, P> const& _zw) $/;"	function	line:386	class:glm::vec	signature:(A _x, B _y, vec<2, C, P> const& _zw)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, B _y, vec<2, C, P> const& _zw) $/;"	function	line:395	class:glm::vec	signature:(vec<1, A, P> const& _x, B _y, vec<2, C, P> const& _zw)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<1, B, P> const& _y, vec<2, C, P> const& _zw) $/;"	function	line:404	class:glm::vec	signature:(A _x, vec<1, B, P> const& _y, vec<2, C, P> const& _zw)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, typename C, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<1, B, P> const& _y, vec<2, C, P> const& _zw) $/;"	function	line:413	class:glm::vec	signature:(vec<1, A, P> const& _x, vec<1, B, P> const& _y, vec<2, C, P> const& _zw)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, B _w) $/;"	function	line:422	class:glm::vec	signature:(vec<3, A, P> const& _xyz, B _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, vec<1, B, P> const& _w) $/;"	function	line:431	class:glm::vec	signature:(vec<3, A, P> const& _xyz, vec<1, B, P> const& _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<3, B, P> const& _yzw) $/;"	function	line:440	class:glm::vec	signature:(A _x, vec<3, B, P> const& _yzw)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<3, B, P> const& _yzw) $/;"	function	line:449	class:glm::vec	signature:(vec<1, A, P> const& _x, vec<3, B, P> const& _yzw)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<2, B, P> const& _zw) $/;"	function	line:458	class:glm::vec	signature:(vec<2, A, P> const& _xy, vec<2, B, P> const& _zw)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
vec	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, U, P> const& v) $/;"	function	line:467	class:glm::vec	signature:(vec<4, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> :: 
operator []	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T& vec<4, T, Q>::operator[](typename vec<4, T, Q>::length_type i) $/;"	function	line:477	class:glm::vec	signature:(typename vec<4, T, Q>::length_type i)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR T vec <4, T, Q> :: 
operator []	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<4, T, Q>::operator[](typename vec<4, T, Q>::length_type i) const $/;"	function	line:495	class:glm::vec	signature:(typename vec<4, T, Q>::length_type i) const	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const vec <4, T, Q> :: 
operator =	/usr/include/glm/detail/type_vec4.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, T, Q> const& v) $/;"	function	line:516	class:glm::vec	signature:(vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator =	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, U, Q> const& v) $/;"	function	line:528	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator +=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(U scalar) $/;"	function	line:539	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator +=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<1, U, Q> const& v) $/;"	function	line:546	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator +=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<4, U, Q> const& v) $/;"	function	line:553	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator -=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(U scalar) $/;"	function	line:560	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator -=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<1, U, Q> const& v) $/;"	function	line:567	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator -=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<4, U, Q> const& v) $/;"	function	line:574	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator *=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(U scalar) $/;"	function	line:581	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator *=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<1, U, Q> const& v) $/;"	function	line:588	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator *=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<4, U, Q> const& v) $/;"	function	line:595	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator /=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(U scalar) $/;"	function	line:602	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator /=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(vec<1, U, Q> const& v) $/;"	function	line:609	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator /=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(vec<4, U, Q> const& v) $/;"	function	line:616	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator ++	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator++() $/;"	function	line:624	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator --	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator--() $/;"	function	line:634	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator ++	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> vec<4, T, Q>::operator++(int) $/;"	function	line:644	class:glm::vec	signature:(int)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator --	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> vec<4, T, Q>::operator--(int) $/;"	function	line:652	class:glm::vec	signature:(int)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator %=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(U scalar) $/;"	function	line:663	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator %=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<1, U, Q> const& v) $/;"	function	line:670	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator %=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<4, U, Q> const& v) $/;"	function	line:677	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator &=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(U scalar) $/;"	function	line:684	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator &=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<1, U, Q> const& v) $/;"	function	line:691	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator &=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<4, U, Q> const& v) $/;"	function	line:698	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator |=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(U scalar) $/;"	function	line:705	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator |=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<1, U, Q> const& v) $/;"	function	line:712	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator |=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<4, U, Q> const& v) $/;"	function	line:719	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator ^=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(U scalar) $/;"	function	line:726	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator ^=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<1, U, Q> const& v) $/;"	function	line:733	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator ^=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<4, U, Q> const& v) $/;"	function	line:740	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator <<=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(U scalar) $/;"	function	line:747	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator <<=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<1, U, Q> const& v) $/;"	function	line:754	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator <<=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<4, U, Q> const& v) $/;"	function	line:761	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator >>=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(U scalar) $/;"	function	line:768	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator >>=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<1, U, Q> const& v) $/;"	function	line:775	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator >>=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<4, U, Q> const& v) $/;"	function	line:782	class:glm::vec	signature:(vec<4, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> vec <4, T, Q> :: 
operator +	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v) $/;"	function	line:790	namespace:glm	signature:(vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator -	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v) $/;"	function	line:796	namespace:glm	signature:(vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator +	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v, T const & scalar) $/;"	function	line:804	namespace:glm	signature:(vec<4, T, Q> const& v, T const & scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator +	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:810	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator +	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(T scalar, vec<4, T, Q> const& v) $/;"	function	line:816	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator +	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:822	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator +	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:828	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator -	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v, T const & scalar) $/;"	function	line:834	namespace:glm	signature:(vec<4, T, Q> const& v, T const & scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator -	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:840	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator -	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(T scalar, vec<4, T, Q> const& v) $/;"	function	line:846	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator -	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:852	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator -	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:858	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator *	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v, T const & scalar) $/;"	function	line:864	namespace:glm	signature:(vec<4, T, Q> const& v, T const & scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator *	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:870	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator *	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(T scalar, vec<4, T, Q> const& v) $/;"	function	line:876	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator *	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:882	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator *	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:888	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator /	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v, T const & scalar) $/;"	function	line:894	namespace:glm	signature:(vec<4, T, Q> const& v, T const & scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator /	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:900	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator /	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(T scalar, vec<4, T, Q> const& v) $/;"	function	line:906	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator /	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:912	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator /	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:918	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator %	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v, T scalar) $/;"	function	line:926	namespace:glm	signature:(vec<4, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator %	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:932	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator %	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(T scalar, vec<4, T, Q> const& v) $/;"	function	line:938	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator %	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v) $/;"	function	line:944	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator %	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:950	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator &	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v, T scalar) $/;"	function	line:956	namespace:glm	signature:(vec<4, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator &	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:962	namespace:glm	signature:(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator &	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(T scalar, vec<4, T, Q> const& v) $/;"	function	line:968	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator &	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:974	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator &	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:980	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator |	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v, T scalar) $/;"	function	line:986	namespace:glm	signature:(vec<4, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator |	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:992	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator |	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(T scalar, vec<4, T, Q> const& v) $/;"	function	line:998	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator |	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1004	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator |	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1010	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator ^	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v, T scalar) $/;"	function	line:1016	namespace:glm	signature:(vec<4, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator ^	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:1022	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator ^	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(T scalar, vec<4, T, Q> const& v) $/;"	function	line:1028	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator ^	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1034	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator ^	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1040	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator <<	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v, T scalar) $/;"	function	line:1046	namespace:glm	signature:(vec<4, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator <<	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:1052	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator <<	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(T scalar, vec<4, T, Q> const& v) $/;"	function	line:1058	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator <<	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1064	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator <<	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1070	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator >>	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v, T scalar) $/;"	function	line:1076	namespace:glm	signature:(vec<4, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator >>	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:1082	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator >>	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(T scalar, vec<4, T, Q> const& v) $/;"	function	line:1088	namespace:glm	signature:(T scalar, vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator >>	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1094	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator >>	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1100	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator ~	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator~(vec<4, T, Q> const& v) $/;"	function	line:1106	namespace:glm	signature:(vec<4, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, T, Q> 
operator ==	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1114	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
operator !=	/usr/include/glm/detail/type_vec4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2) $/;"	function	line:1120	namespace:glm	signature:(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
operator &&	/usr/include/glm/detail/type_vec4.inl	/^	template<qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> operator&&(vec<4, bool, Q> const& v1, vec<4, bool, Q> const& v2) $/;"	function	line:1126	namespace:glm	signature:(vec<4, bool, Q> const& v1, vec<4, bool, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, bool, Q> 
operator ||	/usr/include/glm/detail/type_vec4.inl	/^	template<qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> operator||(vec<4, bool, Q> const& v1, vec<4, bool, Q> const& v2) $/;"	function	line:1132	namespace:glm	signature:(vec<4, bool, Q> const& v1, vec<4, bool, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, bool, Q> 
glm	/usr/include/glm/detail/type_vec4_simd.inl	/^namespace glm{$/;"	namespace	line:3
detail	/usr/include/glm/detail/type_vec4_simd.inl	/^namespace detail$/;"	namespace	line:4	namespace:glm
_swizzle_base1	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q, int E0, int E1, int E2, int E3> 	struct _swizzle_base1<4, float, Q, E0,E1,E2,E3, true> : public _swizzle_base0<float, 4> $/;"	struct	line:8	namespace:glm::detail	inherits:_swizzle_base0<float,4>
operator ()	/usr/include/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, float, Q> operator ()()  const$/;"	function	line:10	struct:glm::detail::_swizzle_base1	access:public	signature:() const	returns:GLM_FUNC_QUALIFIER vec <4, float, Q> 
_swizzle_base1	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q, int E0, int E1, int E2, int E3> 	struct _swizzle_base1<4, int, Q, E0,E1,E2,E3, true> : public _swizzle_base0<int, 4> $/;"	struct	line:25	namespace:glm::detail	inherits:_swizzle_base0<int,4>
operator ()	/usr/include/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, int, Q> operator ()()  const$/;"	function	line:27	struct:glm::detail::_swizzle_base1	access:public	signature:() const	returns:GLM_FUNC_QUALIFIER vec <4, int, Q> 
_swizzle_base1	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q, int E0, int E1, int E2, int E3> 	struct _swizzle_base1<4, uint, Q, E0,E1,E2,E3, true> : public _swizzle_base0<uint, 4> $/;"	struct	line:38	namespace:glm::detail	inherits:_swizzle_base0<uint,4>
operator ()	/usr/include/glm/detail/type_vec4_simd.inl	/^		GLM_FUNC_QUALIFIER vec<4, uint, Q> operator ()()  const$/;"	function	line:40	struct:glm::detail::_swizzle_base1	access:public	signature:() const	returns:GLM_FUNC_QUALIFIER vec <4, uint, Q> 
compute_vec4_add	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_add<float, Q, true> $/;"	struct	line:52	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	function	line:54	struct:glm::detail::compute_vec4_add	access:public	signature:(vec<4, float, Q> const& a, vec<4, float, Q> const& b)	returns:vec <4, float, Q> 
compute_vec4_add	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_add<double, Q, true> $/;"	struct	line:64	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	function	line:66	struct:glm::detail::compute_vec4_add	access:public	signature:(vec<4, double, Q> const& a, vec<4, double, Q> const& b)	returns:vec <4, double, Q> 
compute_vec4_sub	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_sub<float, Q, true> $/;"	struct	line:76	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	function	line:78	struct:glm::detail::compute_vec4_sub	access:public	signature:(vec<4, float, Q> const& a, vec<4, float, Q> const& b)	returns:vec <4, float, Q> 
compute_vec4_sub	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_sub<double, Q, true> $/;"	struct	line:88	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	function	line:90	struct:glm::detail::compute_vec4_sub	access:public	signature:(vec<4, double, Q> const& a, vec<4, double, Q> const& b)	returns:vec <4, double, Q> 
compute_vec4_mul	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_mul<float, Q, true> $/;"	struct	line:100	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	function	line:102	struct:glm::detail::compute_vec4_mul	access:public	signature:(vec<4, float, Q> const& a, vec<4, float, Q> const& b)	returns:vec <4, float, Q> 
compute_vec4_mul	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_mul<double, Q, true> $/;"	struct	line:112	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	function	line:114	struct:glm::detail::compute_vec4_mul	access:public	signature:(vec<4, double, Q> const& a, vec<4, double, Q> const& b)	returns:vec <4, double, Q> 
compute_vec4_div	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_div<float, Q, true> $/;"	struct	line:124	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	function	line:126	struct:glm::detail::compute_vec4_div	access:public	signature:(vec<4, float, Q> const& a, vec<4, float, Q> const& b)	returns:vec <4, float, Q> 
compute_vec4_div	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_div<double, Q, true> $/;"	struct	line:136	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q> const& b)$/;"	function	line:138	struct:glm::detail::compute_vec4_div	access:public	signature:(vec<4, double, Q> const& a, vec<4, double, Q> const& b)	returns:vec <4, double, Q> 
compute_vec4_div	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	struct compute_vec4_div<float, aligned_lowp, true> $/;"	struct	line:148	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, aligned_lowp> call(vec<4, float, aligned_lowp> const& a, vec<4, float, aligned_lowp> const& b)$/;"	function	line:150	struct:glm::detail::compute_vec4_div	access:public	signature:(vec<4, float, aligned_lowp> const& a, vec<4, float, aligned_lowp> const& b)	returns:vec <4, float, aligned_lowp> 
compute_vec4_and	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_and<T, Q, true, 32, true> $/;"	struct	line:159	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:161	struct:glm::detail::compute_vec4_and	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_and	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_and<T, Q, true, 64, true> $/;"	struct	line:171	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:173	struct:glm::detail::compute_vec4_and	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_or	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_or<T, Q, true, 32, true> $/;"	struct	line:183	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:185	struct:glm::detail::compute_vec4_or	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_or	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_or<T, Q, true, 64, true> $/;"	struct	line:195	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:197	struct:glm::detail::compute_vec4_or	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_xor	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_xor<T, Q, true, 32, true> $/;"	struct	line:207	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:209	struct:glm::detail::compute_vec4_xor	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_xor	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_xor<T, Q, true, 64, true> $/;"	struct	line:219	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:221	struct:glm::detail::compute_vec4_xor	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_shift_left	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_shift_left<T, Q, true, 32, true> $/;"	struct	line:231	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:233	struct:glm::detail::compute_vec4_shift_left	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_shift_left	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_shift_left<T, Q, true, 64, true> $/;"	struct	line:243	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:245	struct:glm::detail::compute_vec4_shift_left	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_shift_right	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_shift_right<T, Q, true, 32, true> $/;"	struct	line:255	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:257	struct:glm::detail::compute_vec4_shift_right	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_shift_right	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_shift_right<T, Q, true, 64, true> $/;"	struct	line:267	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	function	line:269	struct:glm::detail::compute_vec4_shift_right	access:public	signature:(vec<4, T, Q> const& a, vec<4, T, Q> const& b)	returns:vec <4, T, Q> 
compute_vec4_bitwise_not	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_bitwise_not<T, Q, true, 32, true> $/;"	struct	line:279	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& v)$/;"	function	line:281	struct:glm::detail::compute_vec4_bitwise_not	access:public	signature:(vec<4, T, Q> const& v)	returns:vec <4, T, Q> 
compute_vec4_bitwise_not	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<typename T, qualifier Q> 	struct compute_vec4_bitwise_not<T, Q, true, 64, true> $/;"	struct	line:291	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, T, Q> call(vec<4, T, Q> const& v)$/;"	function	line:293	struct:glm::detail::compute_vec4_bitwise_not	access:public	signature:(vec<4, T, Q> const& v)	returns:vec <4, T, Q> 
compute_vec4_equal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_equal<float, Q, false, 32, true> $/;"	struct	line:303	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)$/;"	function	line:305	struct:glm::detail::compute_vec4_equal	access:public	signature:(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)	returns:bool 
compute_vec4_equal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_equal<int, Q, true, 32, true> $/;"	struct	line:313	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)$/;"	function	line:315	struct:glm::detail::compute_vec4_equal	access:public	signature:(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)	returns:bool 
compute_vec4_nequal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_nequal<float, Q, false, 32, true> $/;"	struct	line:325	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)$/;"	function	line:327	struct:glm::detail::compute_vec4_nequal	access:public	signature:(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)	returns:bool 
compute_vec4_nequal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_nequal<int, Q, true, 32, true> $/;"	struct	line:335	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)$/;"	function	line:337	struct:glm::detail::compute_vec4_nequal	access:public	signature:(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)	returns:bool 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(float _s) : $/;"	function	line:348	class:glm::vec	signature:(float _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(float _s) : $/;"	function	line:353	class:glm::vec	signature:(float _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(float _s) : $/;"	function	line:358	class:glm::vec	signature:(float _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_lowp>::vec(double _s) : $/;"	function	line:364	class:glm::vec	signature:(double _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, double, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_mediump>::vec(double _s) : $/;"	function	line:369	class:glm::vec	signature:(double _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, double, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_highp>::vec(double _s) : $/;"	function	line:374	class:glm::vec	signature:(double _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, double, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_lowp>::vec(int _s) : $/;"	function	line:380	class:glm::vec	signature:(int _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_mediump>::vec(int _s) : $/;"	function	line:385	class:glm::vec	signature:(int _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(int _s) : $/;"	function	line:390	class:glm::vec	signature:(int _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_lowp>::vec(detail::int64 _s) : $/;"	function	line:396	class:glm::vec	signature:(detail::int64 _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, detail::int64, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_mediump>::vec(detail::int64 _s) : $/;"	function	line:401	class:glm::vec	signature:(detail::int64 _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, detail::int64, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, detail::int64, aligned_highp>::vec(detail::int64 _s) : $/;"	function	line:406	class:glm::vec	signature:(detail::int64 _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, detail::int64, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(float _x, float _y, float _z, float _w) : $/;"	function	line:412	class:glm::vec	signature:(float _x, float _y, float _z, float _w)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(float _x, float _y, float _z, float _w) : $/;"	function	line:417	class:glm::vec	signature:(float _x, float _y, float _z, float _w)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(float _x, float _y, float _z, float _w) : $/;"	function	line:422	class:glm::vec	signature:(float _x, float _y, float _z, float _w)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_lowp>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:428	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_mediump>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:434	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:440	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:446	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:452	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:458	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 
glm	/usr/include/glm/detail/type_vec4_simd.inl	/^namespace glm {$/;"	namespace	line:466
detail	/usr/include/glm/detail/type_vec4_simd.inl	/^namespace detail {$/;"	namespace	line:467	namespace:glm
compute_vec4_add	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_add<float, Q, true> $/;"	struct	line:470	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	function	line:474	struct:glm::detail::compute_vec4_add	access:public	signature:(vec<4, float, Q> const& a, vec<4, float, Q> const& b)	returns:vec <4, float, Q> 
compute_vec4_add	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_add<uint, Q, true> $/;"	struct	line:483	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		call(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)$/;"	function	line:487	struct:glm::detail::compute_vec4_add	access:public	signature:(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)	returns:vec <4, uint, Q> 
compute_vec4_add	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_add<int, Q, true> $/;"	struct	line:496	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		call(vec<4, int, Q> const& a, vec<4, int, Q> const& b)$/;"	function	line:500	struct:glm::detail::compute_vec4_add	access:public	signature:(vec<4, int, Q> const& a, vec<4, int, Q> const& b)	returns:vec <4, int, Q> 
compute_vec4_sub	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_sub<float, Q, true> $/;"	struct	line:509	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	function	line:511	struct:glm::detail::compute_vec4_sub	access:public	signature:(vec<4, float, Q> const& a, vec<4, float, Q> const& b)	returns:vec <4, float, Q> 
compute_vec4_sub	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_sub<uint, Q, true> $/;"	struct	line:520	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, uint, Q> call(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)$/;"	function	line:522	struct:glm::detail::compute_vec4_sub	access:public	signature:(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)	returns:vec <4, uint, Q> 
compute_vec4_sub	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_sub<int, Q, true> $/;"	struct	line:531	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, int, Q> call(vec<4, int, Q> const& a, vec<4, int, Q> const& b)$/;"	function	line:533	struct:glm::detail::compute_vec4_sub	access:public	signature:(vec<4, int, Q> const& a, vec<4, int, Q> const& b)	returns:vec <4, int, Q> 
compute_vec4_mul	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_mul<float, Q, true> $/;"	struct	line:542	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	function	line:544	struct:glm::detail::compute_vec4_mul	access:public	signature:(vec<4, float, Q> const& a, vec<4, float, Q> const& b)	returns:vec <4, float, Q> 
compute_vec4_mul	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_mul<uint, Q, true> $/;"	struct	line:553	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, uint, Q> call(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)$/;"	function	line:555	struct:glm::detail::compute_vec4_mul	access:public	signature:(vec<4, uint, Q> const& a, vec<4, uint, Q> const& b)	returns:vec <4, uint, Q> 
compute_vec4_mul	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_mul<int, Q, true> $/;"	struct	line:564	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, int, Q> call(vec<4, int, Q> const& a, vec<4, int, Q> const& b)$/;"	function	line:566	struct:glm::detail::compute_vec4_mul	access:public	signature:(vec<4, int, Q> const& a, vec<4, int, Q> const& b)	returns:vec <4, int, Q> 
compute_vec4_div	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_div<float, Q, true> $/;"	struct	line:575	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> const& b)$/;"	function	line:577	struct:glm::detail::compute_vec4_div	access:public	signature:(vec<4, float, Q> const& a, vec<4, float, Q> const& b)	returns:vec <4, float, Q> 
compute_vec4_equal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_equal<float, Q, false, 32, true> $/;"	struct	line:586	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)$/;"	function	line:588	struct:glm::detail::compute_vec4_equal	access:public	signature:(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)	returns:bool 
compute_vec4_equal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_equal<uint, Q, false, 32, true> $/;"	struct	line:605	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, uint, Q> const& v1, vec<4, uint, Q> const& v2)$/;"	function	line:607	struct:glm::detail::compute_vec4_equal	access:public	signature:(vec<4, uint, Q> const& v1, vec<4, uint, Q> const& v2)	returns:bool 
compute_vec4_equal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_equal<int, Q, false, 32, true> $/;"	struct	line:624	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)$/;"	function	line:626	struct:glm::detail::compute_vec4_equal	access:public	signature:(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)	returns:bool 
compute_vec4_nequal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_nequal<float, Q, false, 32, true> $/;"	struct	line:643	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)$/;"	function	line:645	struct:glm::detail::compute_vec4_nequal	access:public	signature:(vec<4, float, Q> const& v1, vec<4, float, Q> const& v2)	returns:bool 
compute_vec4_nequal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_nequal<uint, Q, false, 32, true> $/;"	struct	line:652	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, uint, Q> const& v1, vec<4, uint, Q> const& v2)$/;"	function	line:654	struct:glm::detail::compute_vec4_nequal	access:public	signature:(vec<4, uint, Q> const& v1, vec<4, uint, Q> const& v2)	returns:bool 
compute_vec4_nequal	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<qualifier Q> 	struct compute_vec4_nequal<int, Q, false, 32, true> $/;"	struct	line:661	namespace:glm::detail
call	/usr/include/glm/detail/type_vec4_simd.inl	/^		static bool call(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)$/;"	function	line:663	struct:glm::detail::compute_vec4_nequal	access:public	signature:(vec<4, int, Q> const& v1, vec<4, int, Q> const& v2)	returns:bool 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(float _s) : $/;"	function	line:673	class:glm::vec	signature:(float _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(float _s) : $/;"	function	line:678	class:glm::vec	signature:(float _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(float _s) : $/;"	function	line:683	class:glm::vec	signature:(float _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_lowp>::vec(int _s) : $/;"	function	line:688	class:glm::vec	signature:(int _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_mediump>::vec(int _s) : $/;"	function	line:693	class:glm::vec	signature:(int _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(int _s) : $/;"	function	line:698	class:glm::vec	signature:(int _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, int, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, uint, aligned_lowp>::vec(uint _s) : $/;"	function	line:703	class:glm::vec	signature:(uint _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, uint, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, uint, aligned_mediump>::vec(uint _s) : $/;"	function	line:708	class:glm::vec	signature:(uint _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, uint, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, uint, aligned_highp>::vec(uint _s) : $/;"	function	line:713	class:glm::vec	signature:(uint _s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, uint, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(const vec<4, float, aligned_highp>& rhs) : $/;"	function	line:719	class:glm::vec	signature:(const vec<4, float, aligned_highp>& rhs)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(const vec<4, int, aligned_highp>& rhs) : $/;"	function	line:725	class:glm::vec	signature:(const vec<4, int, aligned_highp>& rhs)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(const vec<4, uint, aligned_highp>& rhs) : $/;"	function	line:731	class:glm::vec	signature:(const vec<4, uint, aligned_highp>& rhs)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:737	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:743	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(int _x, int _y, int _z, int _w) : $/;"	function	line:749	class:glm::vec	signature:(int _x, int _y, int _z, int _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_lowp>::vec(uint _x, uint _y, uint _z, uint _w) : $/;"	function	line:755	class:glm::vec	signature:(uint _x, uint _y, uint _z, uint _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_lowp> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_mediump>::vec(uint _x, uint _y, uint _z, uint _w) : $/;"	function	line:761	class:glm::vec	signature:(uint _x, uint _y, uint _z, uint _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_mediump> :: 
vec	/usr/include/glm/detail/type_vec4_simd.inl	/^	template<> 	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(uint _x, uint _y, uint _z, uint _w) : $/;"	function	line:768	class:glm::vec	signature:(uint _x, uint _y, uint _z, uint _w)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <4, float, aligned_highp> :: 

glm	/usr/include/glm/detail/func_common.inl	/^namespace glm$/;"	namespace	line:13
min	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType min(genType x, genType y) $/;"	function	line:17	namespace:glm	signature:(genType x, genType y)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType 
max	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType max(genType x, genType y) $/;"	function	line:25	namespace:glm	signature:(genType x, genType y)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType 
abs	/usr/include/glm/detail/func_common.inl	/^	template<> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR int abs(int x) $/;"	function	line:34	namespace:glm	signature:(int x)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR int 
round	/usr/include/glm/detail/func_common.inl	/^		using ::std::round;$/;"	class	line:42	namespace:glm	typeref:class:::std::round
round	/usr/include/glm/detail/func_common.inl	/^		template<typename genType> 		GLM_FUNC_QUALIFIER genType round(genType x) $/;"	function	line:45	namespace:glm	signature:(genType x)	returns:template GLM_FUNC_QUALIFIER genType 
trunc	/usr/include/glm/detail/func_common.inl	/^		using ::std::trunc;$/;"	class	line:55	namespace:glm	typeref:class:::std::trunc
trunc	/usr/include/glm/detail/func_common.inl	/^		template<typename genType> 		GLM_FUNC_QUALIFIER genType trunc(genType x) $/;"	function	line:58	namespace:glm	signature:(genType x)	returns:template GLM_FUNC_QUALIFIER genType 
glm	/usr/include/glm/detail/func_common.inl	/^namespace glm{$/;"	namespace	line:68
detail	/usr/include/glm/detail/func_common.inl	/^namespace detail$/;"	namespace	line:69	namespace:glm
compute_abs_vector	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_abs_vector $/;"	struct	line:72	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	function	line:74	struct:glm::detail::compute_abs_vector	access:public	signature:(vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_mix_vector	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, typename U, qualifier Q, bool Aligned> 	struct compute_mix_vector $/;"	struct	line:81	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> const& a)$/;"	function	line:83	struct:glm::detail::compute_mix_vector	access:public	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> const& a)	returns:vec <L, T, Q> 
compute_mix_vector	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_mix_vector<L, T, bool, Q, Aligned> $/;"	struct	line:92	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, bool, Q> const& a)$/;"	function	line:94	struct:glm::detail::compute_mix_vector	access:public	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, bool, Q> const& a)	returns:vec <L, T, Q> 
compute_mix_scalar	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, typename U, qualifier Q, bool Aligned> 	struct compute_mix_scalar $/;"	struct	line:104	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U const& a)$/;"	function	line:106	struct:glm::detail::compute_mix_scalar	access:public	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U const& a)	returns:vec <L, T, Q> 
compute_mix_scalar	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_mix_scalar<L, T, bool, Q, Aligned> $/;"	struct	line:115	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, bool const& a)$/;"	function	line:117	struct:glm::detail::compute_mix_scalar	access:public	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y, bool const& a)	returns:vec <L, T, Q> 
compute_mix	/usr/include/glm/detail/func_common.inl	/^	template<typename T, typename U> 	struct compute_mix $/;"	struct	line:124	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const& x, T const& y, U const& a)$/;"	function	line:126	struct:glm::detail::compute_mix	access:public	signature:(T const& x, T const& y, U const& a)	returns:T 
compute_mix	/usr/include/glm/detail/func_common.inl	/^	template<typename T> 	struct compute_mix<T, bool> $/;"	struct	line:135	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const& x, T const& y, bool const& a)$/;"	function	line:137	struct:glm::detail::compute_mix	access:public	signature:(T const& x, T const& y, bool const& a)	returns:T 
compute_sign	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool isFloat, bool Aligned> 	struct compute_sign $/;"	struct	line:144	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	function	line:146	struct:glm::detail::compute_sign	access:public	signature:(vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_sign	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_sign<L, T, Q, false, Aligned> $/;"	struct	line:154	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	function	line:156	struct:glm::detail::compute_sign	access:public	signature:(vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_floor	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_floor $/;"	struct	line:167	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	function	line:169	struct:glm::detail::compute_floor	access:public	signature:(vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_ceil	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_ceil $/;"	struct	line:176	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	function	line:178	struct:glm::detail::compute_ceil	access:public	signature:(vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_fract	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_fract $/;"	struct	line:185	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	function	line:187	struct:glm::detail::compute_fract	access:public	signature:(vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_trunc	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_trunc $/;"	struct	line:194	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	function	line:196	struct:glm::detail::compute_trunc	access:public	signature:(vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_round	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_round $/;"	struct	line:203	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	function	line:205	struct:glm::detail::compute_round	access:public	signature:(vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_mod	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_mod $/;"	struct	line:212	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	function	line:214	struct:glm::detail::compute_mod	access:public	signature:(vec<L, T, Q> const& a, vec<L, T, Q> const& b)	returns:vec <L, T, Q> 
compute_min_vector	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_min_vector $/;"	struct	line:222	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	function	line:224	struct:glm::detail::compute_min_vector	access:public	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:vec <L, T, Q> 
compute_max_vector	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_max_vector $/;"	struct	line:231	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	function	line:233	struct:glm::detail::compute_max_vector	access:public	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:vec <L, T, Q> 
compute_clamp_vector	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_clamp_vector $/;"	struct	line:240	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L, T, Q> const& maxVal)$/;"	function	line:242	struct:glm::detail::compute_clamp_vector	access:public	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L, T, Q> const& maxVal)	returns:vec <L, T, Q> 
compute_step_vector	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_step_vector $/;"	struct	line:249	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)$/;"	function	line:251	struct:glm::detail::compute_step_vector	access:public	signature:(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
compute_smoothstep_vector	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q, bool Aligned> 	struct compute_smoothstep_vector $/;"	struct	line:258	namespace:glm::detail
call	/usr/include/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1, vec<L, T, Q> const& x)$/;"	function	line:260	struct:glm::detail::compute_smoothstep_vector	access:public	signature:(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1, vec<L, T, Q> const& x)	returns:vec <L, T, Q> 
abs	/usr/include/glm/detail/func_common.inl	/^	template<typename genFIType> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType abs(genFIType x) $/;"	function	line:270	namespace:glm	signature:(genFIType x)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType 
abs	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> abs(vec<L, T, Q> const& x) $/;"	function	line:276	namespace:glm	signature:(vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, T, Q> 
sign	/usr/include/glm/detail/func_common.inl	/^	template<typename genFIType> 	GLM_FUNC_QUALIFIER genFIType sign(genFIType x) $/;"	function	line:284	namespace:glm	signature:(genFIType x)	returns:template GLM_FUNC_QUALIFIER genFIType 
sign	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> sign(vec<L, T, Q> const& x) $/;"	function	line:295	namespace:glm	signature:(vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
floor	/usr/include/glm/detail/func_common.inl	/^	using ::std::floor;$/;"	class	line:305	namespace:glm	typeref:class:::std::floor
floor	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> floor(vec<L, T, Q> const& x) $/;"	function	line:307	namespace:glm	signature:(vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
trunc	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> trunc(vec<L, T, Q> const& x) $/;"	function	line:314	namespace:glm	signature:(vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
round	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> round(vec<L, T, Q> const& x) $/;"	function	line:321	namespace:glm	signature:(vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
roundEven	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER genType roundEven(genType x) $/;"	function	line:340	namespace:glm	signature:(genType x)	returns:template GLM_FUNC_QUALIFIER genType 
roundEven	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> roundEven(vec<L, T, Q> const& x) $/;"	function	line:371	namespace:glm	signature:(vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
ceil	/usr/include/glm/detail/func_common.inl	/^	using ::std::ceil;$/;"	class	line:378	namespace:glm	typeref:class:::std::ceil
ceil	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> ceil(vec<L, T, Q> const& x) $/;"	function	line:380	namespace:glm	signature:(vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
fract	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER genType fract(genType x) $/;"	function	line:388	namespace:glm	signature:(genType x)	returns:template GLM_FUNC_QUALIFIER genType 
fract	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> fract(vec<L, T, Q> const& x) $/;"	function	line:394	namespace:glm	signature:(vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
mod	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER genType mod(genType x, genType y) $/;"	function	line:402	namespace:glm	signature:(genType x, genType y)	returns:template GLM_FUNC_QUALIFIER genType 
mod	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> mod(vec<L, T, Q> const& x, T y) $/;"	function	line:414	namespace:glm	signature:(vec<L, T, Q> const& x, T y)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
mod	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> mod(vec<L, T, Q> const& x, vec<L, T, Q> const& y) $/;"	function	line:420	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
modf	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER genType modf(genType x, genType & i) $/;"	function	line:427	namespace:glm	signature:(genType x, genType & i)	returns:template GLM_FUNC_QUALIFIER genType 
modf	/usr/include/glm/detail/func_common.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<1, T, Q> modf(vec<1, T, Q> const& x, vec<1, T, Q> & i) $/;"	function	line:434	namespace:glm	signature:(vec<1, T, Q> const& x, vec<1, T, Q> & i)	returns:template GLM_FUNC_QUALIFIER vec <1, T, Q> 
modf	/usr/include/glm/detail/func_common.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<2, T, Q> modf(vec<2, T, Q> const& x, vec<2, T, Q> & i) $/;"	function	line:441	namespace:glm	signature:(vec<2, T, Q> const& x, vec<2, T, Q> & i)	returns:template GLM_FUNC_QUALIFIER vec <2, T, Q> 
modf	/usr/include/glm/detail/func_common.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<3, T, Q> modf(vec<3, T, Q> const& x, vec<3, T, Q> & i) $/;"	function	line:449	namespace:glm	signature:(vec<3, T, Q> const& x, vec<3, T, Q> & i)	returns:template GLM_FUNC_QUALIFIER vec <3, T, Q> 
modf	/usr/include/glm/detail/func_common.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<4, T, Q> modf(vec<4, T, Q> const& x, vec<4, T, Q> & i) $/;"	function	line:458	namespace:glm	signature:(vec<4, T, Q> const& x, vec<4, T, Q> & i)	returns:template GLM_FUNC_QUALIFIER vec <4, T, Q> 
min	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& a, T b) $/;"	function	line:477	namespace:glm	signature:(vec<L, T, Q> const& a, T b)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, T, Q> 
min	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& a, vec<L, T, Q> const& b) $/;"	function	line:484	namespace:glm	signature:(vec<L, T, Q> const& a, vec<L, T, Q> const& b)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, T, Q> 
max	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& a, T b) $/;"	function	line:491	namespace:glm	signature:(vec<L, T, Q> const& a, T b)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, T, Q> 
max	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& a, vec<L, T, Q> const& b) $/;"	function	line:498	namespace:glm	signature:(vec<L, T, Q> const& a, vec<L, T, Q> const& b)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, T, Q> 
clamp	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType clamp(genType x, genType minVal, genType maxVal) $/;"	function	line:505	namespace:glm	signature:(genType x, genType minVal, genType maxVal)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType 
clamp	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> clamp(vec<L, T, Q> const& x, T minVal, T maxVal) $/;"	function	line:512	namespace:glm	signature:(vec<L, T, Q> const& x, T minVal, T maxVal)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, T, Q> 
clamp	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> clamp(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L, T, Q> const& maxVal) $/;"	function	line:519	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L, T, Q> const& maxVal)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, T, Q> 
mix	/usr/include/glm/detail/func_common.inl	/^	template<typename genTypeT, typename genTypeU> 	GLM_FUNC_QUALIFIER genTypeT mix(genTypeT x, genTypeT y, genTypeU a) $/;"	function	line:526	namespace:glm	signature:(genTypeT x, genTypeT y, genTypeU a)	returns:template GLM_FUNC_QUALIFIER genTypeT 
mix	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, typename U, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U a) $/;"	function	line:532	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U a)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
mix	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, typename U, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> const& a) $/;"	function	line:538	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> const& a)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
step	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER genType step(genType edge, genType x) $/;"	function	line:545	namespace:glm	signature:(genType edge, genType x)	returns:template GLM_FUNC_QUALIFIER genType 
step	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> step(T edge, vec<L, T, Q> const& x) $/;"	function	line:551	namespace:glm	signature:(T edge, vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
step	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> step(vec<L, T, Q> const& edge, vec<L, T, Q> const& x) $/;"	function	line:557	namespace:glm	signature:(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
smoothstep	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER genType smoothstep(genType edge0, genType edge1, genType x) $/;"	function	line:564	namespace:glm	signature:(genType edge0, genType edge1, genType x)	returns:template GLM_FUNC_QUALIFIER genType 
smoothstep	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> smoothstep(T edge0, T edge1, vec<L, T, Q> const& x) $/;"	function	line:573	namespace:glm	signature:(T edge0, T edge1, vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
smoothstep	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> smoothstep(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1, vec<L, T, Q> const& x) $/;"	function	line:579	namespace:glm	signature:(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1, vec<L, T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
isnan	/usr/include/glm/detail/func_common.inl	/^		using std::isnan;$/;"	class	line:585	namespace:glm	typeref:class:std::isnan
isnan	/usr/include/glm/detail/func_common.inl	/^		template<typename genType> 		GLM_FUNC_QUALIFIER bool isnan(genType x) $/;"	function	line:588	namespace:glm	signature:(genType x)	returns:template GLM_FUNC_QUALIFIER bool 
isnan	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, bool, Q> isnan(vec<L, T, Q> const& v) $/;"	function	line:613	namespace:glm	signature:(vec<L, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER vec <L, bool, Q> 
isinf	/usr/include/glm/detail/func_common.inl	/^		using std::isinf;$/;"	class	line:624	namespace:glm	typeref:class:std::isinf
isinf	/usr/include/glm/detail/func_common.inl	/^		template<typename genType> 		GLM_FUNC_QUALIFIER bool isinf(genType x) $/;"	function	line:627	namespace:glm	signature:(genType x)	returns:template GLM_FUNC_QUALIFIER bool 
isinf	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, bool, Q> isinf(vec<L, T, Q> const& v) $/;"	function	line:655	namespace:glm	signature:(vec<L, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER vec <L, bool, Q> 
floatBitsToInt	/usr/include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER int floatBitsToInt(float const& v)$/;"	function	line:665	namespace:glm	signature:(float const& v)	returns:GLM_FUNC_QUALIFIER int 
floatBitsToInt	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, int, Q> floatBitsToInt(vec<L, float, Q> const& v) $/;"	function	line:679	namespace:glm	signature:(vec<L, float, Q> const& v)	returns:template GLM_FUNC_QUALIFIER vec <L, int, Q> 
floatBitsToUint	/usr/include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER uint floatBitsToUint(float const& v)$/;"	function	line:684	namespace:glm	signature:(float const& v)	returns:GLM_FUNC_QUALIFIER uint 
floatBitsToUint	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, uint, Q> floatBitsToUint(vec<L, float, Q> const& v) $/;"	function	line:698	namespace:glm	signature:(vec<L, float, Q> const& v)	returns:template GLM_FUNC_QUALIFIER vec <L, uint, Q> 
intBitsToFloat	/usr/include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER float intBitsToFloat(int const& v)$/;"	function	line:703	namespace:glm	signature:(int const& v)	returns:GLM_FUNC_QUALIFIER float 
intBitsToFloat	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, float, Q> intBitsToFloat(vec<L, int, Q> const& v) $/;"	function	line:717	namespace:glm	signature:(vec<L, int, Q> const& v)	returns:template GLM_FUNC_QUALIFIER vec <L, float, Q> 
uintBitsToFloat	/usr/include/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER float uintBitsToFloat(uint const& v)$/;"	function	line:722	namespace:glm	signature:(uint const& v)	returns:GLM_FUNC_QUALIFIER float 
uintBitsToFloat	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, float, Q> uintBitsToFloat(vec<L, uint, Q> const& v) $/;"	function	line:736	namespace:glm	signature:(vec<L, uint, Q> const& v)	returns:template GLM_FUNC_QUALIFIER vec <L, float, Q> 
fma	/usr/include/glm/detail/func_common.inl	/^		using std::fma;$/;"	class	line:742	namespace:glm	typeref:class:std::fma
fma	/usr/include/glm/detail/func_common.inl	/^		template<typename genType> 		GLM_FUNC_QUALIFIER genType fma(genType const& a, genType const& b, genType const& c) $/;"	function	line:745	namespace:glm	signature:(genType const& a, genType const& b, genType const& c)	returns:template GLM_FUNC_QUALIFIER genType 
frexp	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER genType frexp(genType x, int& exp) $/;"	function	line:752	namespace:glm	signature:(genType x, int& exp)	returns:template GLM_FUNC_QUALIFIER genType 
frexp	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> frexp(vec<L, T, Q> const& v, vec<L, int, Q>& exp) $/;"	function	line:760	namespace:glm	signature:(vec<L, T, Q> const& v, vec<L, int, Q>& exp)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
ldexp	/usr/include/glm/detail/func_common.inl	/^	template<typename genType> 	GLM_FUNC_QUALIFIER genType ldexp(genType const& x, int const& exp) $/;"	function	line:771	namespace:glm	signature:(genType const& x, int const& exp)	returns:template GLM_FUNC_QUALIFIER genType 
ldexp	/usr/include/glm/detail/func_common.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<L, T, Q> ldexp(vec<L, T, Q> const& v, vec<L, int, Q> const& exp) $/;"	function	line:779	namespace:glm	signature:(vec<L, T, Q> const& v, vec<L, int, Q> const& exp)	returns:template GLM_FUNC_QUALIFIER vec <L, T, Q> 
glm	/usr/include/glm/detail/func_vector_relational_simd.inl	/^namespace glm{$/;"	namespace	line:1
detail	/usr/include/glm/detail/func_vector_relational_simd.inl	/^namespace detail$/;"	namespace	line:2	namespace:glm
glm	/usr/include/glm/detail/type_mat2x2.inl	/^namespace glm$/;"	namespace	line:3
mat	/usr/include/glm/detail/type_mat2x2.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat() $/;"	function	line:9	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 2, T, P> const& m) $/;"	function	line:23	class:glm::mat	signature:(mat<2, 2, T, P> const& m)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(T scalar) $/;"	function	line:35	class:glm::mat	signature:(T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat $/;"	function	line:47	class:glm::mat	signature:( T const& x0, T const& y0, T const& x1, T const& y1 )	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(col_type const& v0, col_type const& v1) $/;"	function	line:63	class:glm::mat	signature:(col_type const& v0, col_type const& v1)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename X1, typename Y1, typename X2, typename Y2> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat $/;"	function	line:78	class:glm::mat	signature:( X1 const& x1, Y1 const& y1, X2 const& x2, Y2 const& y2 )	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename V1, typename V2> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(vec<2, V1, Q> const& v1, vec<2, V2, Q> const& v2) $/;"	function	line:95	class:glm::mat	signature:(vec<2, V1, Q> const& v1, vec<2, V2, Q> const& v2)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 2, U, P> const& m) $/;"	function	line:110	class:glm::mat	signature:(mat<2, 2, U, P> const& m)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 3, T, Q> const& m) $/;"	function	line:122	class:glm::mat	signature:(mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 4, T, Q> const& m) $/;"	function	line:134	class:glm::mat	signature:(mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 3, T, Q> const& m) $/;"	function	line:146	class:glm::mat	signature:(mat<2, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 2, T, Q> const& m) $/;"	function	line:158	class:glm::mat	signature:(mat<3, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 4, T, Q> const& m) $/;"	function	line:170	class:glm::mat	signature:(mat<2, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 2, T, Q> const& m) $/;"	function	line:182	class:glm::mat	signature:(mat<4, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 4, T, Q> const& m) $/;"	function	line:194	class:glm::mat	signature:(mat<3, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
mat	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 3, T, Q> const& m) $/;"	function	line:206	class:glm::mat	signature:(mat<4, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <2, 2, T, Q> :: 
operator []	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type& mat<2, 2, T, Q>::operator[](typename mat<2, 2, T, Q>::length_type i) $/;"	function	line:220	class:glm::mat	signature:(typename mat<2, 2, T, Q>::length_type i)	returns:template GLM_FUNC_QUALIFIER typename mat <2, 2, T, Q> :: col_type mat <2, 2, T, Q> :: 
operator []	/usr/include/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::col_type const& mat<2, 2, T, Q>::operator[](typename mat<2, 2, T, Q>::length_type i) const$/;"	function	line:227	class:glm::mat	signature:(typename mat<2, 2, T, Q>::length_type i) const
operator =	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator=(mat<2, 2, U, Q> const& m) $/;"	function	line:237	class:glm::mat	signature:(mat<2, 2, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator +=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(U scalar) $/;"	function	line:246	class:glm::mat	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator +=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(mat<2, 2, U, Q> const& m) $/;"	function	line:255	class:glm::mat	signature:(mat<2, 2, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator -=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(U scalar) $/;"	function	line:264	class:glm::mat	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator -=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(mat<2, 2, U, Q> const& m) $/;"	function	line:273	class:glm::mat	signature:(mat<2, 2, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator *=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(U scalar) $/;"	function	line:282	class:glm::mat	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator *=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(mat<2, 2, U, Q> const& m) $/;"	function	line:291	class:glm::mat	signature:(mat<2, 2, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator /=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator\/=(U scalar) $/;"	function	line:298	class:glm::mat	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator /=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator\/=(mat<2, 2, U, Q> const& m) $/;"	function	line:307	class:glm::mat	signature:(mat<2, 2, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator ++	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator++() $/;"	function	line:315	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator --	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator--() $/;"	function	line:323	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator ++	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> mat<2, 2, T, Q>::operator++(int) $/;"	function	line:331	class:glm::mat	signature:(int)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator --	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> mat<2, 2, T, Q>::operator--(int) $/;"	function	line:339	class:glm::mat	signature:(int)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> mat <2, 2, T, Q> :: 
operator +	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m) $/;"	function	line:349	namespace:glm	signature:(mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator -	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m) $/;"	function	line:355	namespace:glm	signature:(mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator +	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m, T scalar) $/;"	function	line:365	namespace:glm	signature:(mat<2, 2, T, Q> const& m, T scalar)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator +	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(T scalar, mat<2, 2, T, Q> const& m) $/;"	function	line:373	namespace:glm	signature:(T scalar, mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator +	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2) $/;"	function	line:381	namespace:glm	signature:(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator -	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m, T scalar) $/;"	function	line:389	namespace:glm	signature:(mat<2, 2, T, Q> const& m, T scalar)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator -	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(T scalar, mat<2, 2, T, Q> const& m) $/;"	function	line:397	namespace:glm	signature:(T scalar, mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator -	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2) $/;"	function	line:405	namespace:glm	signature:(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator *	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m, T scalar) $/;"	function	line:413	namespace:glm	signature:(mat<2, 2, T, Q> const& m, T scalar)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator *	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(T scalar, mat<2, 2, T, Q> const& m) $/;"	function	line:421	namespace:glm	signature:(T scalar, mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator *	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type operator* $/;"	function	line:429	namespace:glm	signature:( mat<2, 2, T, Q> const& m, typename mat<2, 2, T, Q>::row_type const& v )	returns:template GLM_FUNC_QUALIFIER typename mat <2, 2, T, Q> :: col_type 
operator *	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::row_type operator* $/;"	function	line:441	namespace:glm	signature:( typename mat<2, 2, T, Q>::col_type const& v, mat<2, 2, T, Q> const& m )	returns:template GLM_FUNC_QUALIFIER typename mat <2, 2, T, Q> :: row_type 
operator *	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2) $/;"	function	line:453	namespace:glm	signature:(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator *	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2) $/;"	function	line:463	namespace:glm	signature:(mat<2, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <3, 2, T, Q> 
operator *	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2) $/;"	function	line:475	namespace:glm	signature:(mat<2, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <4, 2, T, Q> 
operator /	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(mat<2, 2, T, Q> const& m, T scalar) $/;"	function	line:489	namespace:glm	signature:(mat<2, 2, T, Q> const& m, T scalar)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator /	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(T scalar, mat<2, 2, T, Q> const& m) $/;"	function	line:497	namespace:glm	signature:(T scalar, mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator /	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::col_type operator\/(mat<2, 2, T, Q> const& m, typename mat<2, 2, T, Q>::row_type const& v) $/;"	function	line:505	namespace:glm	signature:(mat<2, 2, T, Q> const& m, typename mat<2, 2, T, Q>::row_type const& v)	returns:template GLM_FUNC_QUALIFIER typename mat <2, 2, T, Q> :: col_type 
operator /	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<2, 2, T, Q>::row_type operator\/(typename mat<2, 2, T, Q>::col_type const& v, mat<2, 2, T, Q> const& m) $/;"	function	line:511	namespace:glm	signature:(typename mat<2, 2, T, Q>::col_type const& v, mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER typename mat <2, 2, T, Q> :: row_type 
operator /	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> operator\/(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2) $/;"	function	line:517	namespace:glm	signature:(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <2, 2, T, Q> 
operator ==	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER bool operator==(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2) $/;"	function	line:526	namespace:glm	signature:(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER bool 
operator !=	/usr/include/glm/detail/type_mat2x2.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER bool operator!=(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2) $/;"	function	line:532	namespace:glm	signature:(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER bool 
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^namespace BARE2D {$/;"	namespace	line:6
Position	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^	struct Position {$/;"	struct	line:12	namespace:BARE2D
x	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		float x, y, z;$/;"	member	line:13	struct:BARE2D::Position	access:public
y	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		float x, y, z;$/;"	member	line:13	struct:BARE2D::Position	access:public
z	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		float x, y, z;$/;"	member	line:13	struct:BARE2D::Position	access:public
Colour	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^	struct Colour {$/;"	struct	line:20	namespace:BARE2D
Colour	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Colour() {}$/;"	function	line:21	struct:BARE2D::Colour	access:public	signature:()
Colour	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Colour(GLubyte R, GLubyte G, GLubyte B, GLubyte A) : r(R), g(G), b(B), a(A) {}$/;"	function	line:22	struct:BARE2D::Colour	access:public	signature:(GLubyte R, GLubyte G, GLubyte B, GLubyte A)
r	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		GLubyte r, g, b, a;$/;"	member	line:24	struct:BARE2D::Colour	access:public
g	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		GLubyte r, g, b, a;$/;"	member	line:24	struct:BARE2D::Colour	access:public
b	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		GLubyte r, g, b, a;$/;"	member	line:24	struct:BARE2D::Colour	access:public
a	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		GLubyte r, g, b, a;$/;"	member	line:24	struct:BARE2D::Colour	access:public
UV	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^	struct UV {$/;"	struct	line:31	namespace:BARE2D
u	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		float u, v;$/;"	member	line:32	struct:BARE2D::UV	access:public
v	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		float u, v;$/;"	member	line:32	struct:BARE2D::UV	access:public
Vertex	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^	struct Vertex {$/;"	struct	line:39	namespace:BARE2D
position	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Position position;$/;"	member	line:40	struct:BARE2D::Vertex	access:public
colour	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Colour colour;$/;"	member	line:42	struct:BARE2D::Vertex	access:public
uv	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		UV uv;$/;"	member	line:44	struct:BARE2D::Vertex	access:public
setPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		void setPosition(float x, float y, float z) {$/;"	function	line:52	struct:BARE2D::Vertex	access:public	signature:(float x, float y, float z)	returns:void 
setColour	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		void setColour(GLubyte r, GLubyte g, GLubyte b, GLubyte a) {$/;"	function	line:65	struct:BARE2D::Vertex	access:public	signature:(GLubyte r, GLubyte g, GLubyte b, GLubyte a)	returns:void 
setUV	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		void setUV(float u, float v) {$/;"	function	line:77	struct:BARE2D::Vertex	access:public	signature:(float u, float v)	returns:void 
Glyph	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^	class Glyph {$/;"	class	line:87	namespace:BARE2D
Glyph	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Glyph(glm::vec4& destRect, glm::vec4& uvRect, GLuint& Texture, float& Depth, Colour& colour);$/;"	prototype	line:89	class:BARE2D::Glyph	access:public	signature:(glm::vec4& destRect, glm::vec4& uvRect, GLuint& Texture, float& Depth, Colour& colour)
Glyph	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Glyph(glm::vec4& destRect, glm::vec4& uvRect, GLuint& Texture, float& Depth, Colour& colour, float& angle);$/;"	prototype	line:90	class:BARE2D::Glyph	access:public	signature:(glm::vec4& destRect, glm::vec4& uvRect, GLuint& Texture, float& Depth, Colour& colour, float& angle)
Glyph	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Glyph(glm::vec4& destRect, glm::vec4& uvRect, GLuint& Texture, float& Depth, Colour& colour, float& angle, glm::vec2& COR);$/;"	prototype	line:91	class:BARE2D::Glyph	access:public	signature:(glm::vec4& destRect, glm::vec4& uvRect, GLuint& Texture, float& Depth, Colour& colour, float& angle, glm::vec2& COR)
texture	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		GLuint texture;$/;"	member	line:94	class:BARE2D::Glyph	access:public
depth	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		float depth;$/;"	member	line:97	class:BARE2D::Glyph	access:public
topLeft	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Vertex topLeft, bottomLeft, topRight, bottomRight;$/;"	member	line:100	class:BARE2D::Glyph	access:public
bottomLeft	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Vertex topLeft, bottomLeft, topRight, bottomRight;$/;"	member	line:100	class:BARE2D::Glyph	access:public
topRight	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Vertex topLeft, bottomLeft, topRight, bottomRight;$/;"	member	line:100	class:BARE2D::Glyph	access:public
bottomRight	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		Vertex topLeft, bottomLeft, topRight, bottomRight;$/;"	member	line:100	class:BARE2D::Glyph	access:public
rotatePoint	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Vertex.hpp	/^		glm::vec2 rotatePoint(const glm::vec2& pos, float& angle);$/;"	prototype	line:103	class:BARE2D::Glyph	access:protected	signature:(const glm::vec2& pos, float& angle)	returns:glm :: vec2 
RenderBatch	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/RenderBatch.hpp	/^class RenderBatch$/;"	class	line:9
RenderBatch	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/RenderBatch.hpp	/^	RenderBatch(GLuint Offset, GLuint NumVertices, GLuint TextureID) : offset(Offset), numVertices(NumVertices), textureID(TextureID) {$/;"	function	line:12	class:RenderBatch	access:public	signature:(GLuint Offset, GLuint NumVertices, GLuint TextureID)
offset	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/RenderBatch.hpp	/^	GLuint offset;$/;"	member	line:15	class:RenderBatch	access:public
numVertices	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/RenderBatch.hpp	/^	GLuint numVertices;$/;"	member	line:16	class:RenderBatch	access:public
textureID	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/RenderBatch.hpp	/^	GLuint textureID;$/;"	member	line:17	class:RenderBatch	access:public
glm	/usr/include/glm/detail/type_mat3x3.inl	/^namespace glm$/;"	namespace	line:3
mat	/usr/include/glm/detail/type_mat3x3.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat() $/;"	function	line:9	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 3, T, P> const& m) $/;"	function	line:24	class:glm::mat	signature:(mat<3, 3, T, P> const& m)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(T s) $/;"	function	line:37	class:glm::mat	signature:(T s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat $/;"	function	line:50	class:glm::mat	signature:( T x0, T y0, T z0, T x1, T y1, T z1, T x2, T y2, T z2 )	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(col_type const& v0, col_type const& v1, col_type const& v2) $/;"	function	line:68	class:glm::mat	signature:(col_type const& v0, col_type const& v1, col_type const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template< 		typename X1, typename Y1, typename Z1, 		typename X2, typename Y2, typename Z2, 		typename X3, typename Y3, typename Z3> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat $/;"	function	line:87	class:glm::mat	signature:( X1 x1, Y1 y1, Z1 z1, X2 x2, Y2 y2, Z2 z2, X3 x3, Y3 y3, Z3 z3 )	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename V1, typename V2, typename V3> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> const& v2, vec<3, V3, Q> const& v3) $/;"	function	line:106	class:glm::mat	signature:(vec<3, V1, Q> const& v1, vec<3, V2, Q> const& v2, vec<3, V3, Q> const& v3)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 3, U, P> const& m) $/;"	function	line:122	class:glm::mat	signature:(mat<3, 3, U, P> const& m)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 2, T, Q> const& m) $/;"	function	line:135	class:glm::mat	signature:(mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 4, T, Q> const& m) $/;"	function	line:148	class:glm::mat	signature:(mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 3, T, Q> const& m) $/;"	function	line:161	class:glm::mat	signature:(mat<2, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 2, T, Q> const& m) $/;"	function	line:174	class:glm::mat	signature:(mat<3, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 4, T, Q> const& m) $/;"	function	line:187	class:glm::mat	signature:(mat<2, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 2, T, Q> const& m) $/;"	function	line:200	class:glm::mat	signature:(mat<4, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 4, T, Q> const& m) $/;"	function	line:213	class:glm::mat	signature:(mat<3, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
mat	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 3, T, Q> const& m) $/;"	function	line:226	class:glm::mat	signature:(mat<4, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <3, 3, T, Q> :: 
operator []	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type & mat<3, 3, T, Q>::operator[](typename mat<3, 3, T, Q>::length_type i) $/;"	function	line:241	class:glm::mat	signature:(typename mat<3, 3, T, Q>::length_type i)	returns:template GLM_FUNC_QUALIFIER typename mat <3, 3, T, Q> :: col_type mat <3, 3, T, Q> :: 
operator []	/usr/include/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::col_type const& mat<3, 3, T, Q>::operator[](typename mat<3, 3, T, Q>::length_type i) const$/;"	function	line:248	class:glm::mat	signature:(typename mat<3, 3, T, Q>::length_type i) const
operator =	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator=(mat<3, 3, U, Q> const& m) $/;"	function	line:258	class:glm::mat	signature:(mat<3, 3, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator +=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(U s) $/;"	function	line:268	class:glm::mat	signature:(U s)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator +=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(mat<3, 3, U, Q> const& m) $/;"	function	line:278	class:glm::mat	signature:(mat<3, 3, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator -=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(U s) $/;"	function	line:288	class:glm::mat	signature:(U s)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator -=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(mat<3, 3, U, Q> const& m) $/;"	function	line:298	class:glm::mat	signature:(mat<3, 3, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator *=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(U s) $/;"	function	line:308	class:glm::mat	signature:(U s)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator *=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(mat<3, 3, U, Q> const& m) $/;"	function	line:318	class:glm::mat	signature:(mat<3, 3, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator /=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator\/=(U s) $/;"	function	line:325	class:glm::mat	signature:(U s)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator /=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator\/=(mat<3, 3, U, Q> const& m) $/;"	function	line:335	class:glm::mat	signature:(mat<3, 3, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator ++	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator++() $/;"	function	line:343	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator --	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator--() $/;"	function	line:352	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator ++	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat<3, 3, T, Q>::operator++(int) $/;"	function	line:361	class:glm::mat	signature:(int)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator --	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat<3, 3, T, Q>::operator--(int) $/;"	function	line:369	class:glm::mat	signature:(int)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> mat <3, 3, T, Q> :: 
operator +	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m) $/;"	function	line:379	namespace:glm	signature:(mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator -	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m) $/;"	function	line:385	namespace:glm	signature:(mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator +	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m, T scalar) $/;"	function	line:396	namespace:glm	signature:(mat<3, 3, T, Q> const& m, T scalar)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator +	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(T scalar, mat<3, 3, T, Q> const& m) $/;"	function	line:405	namespace:glm	signature:(T scalar, mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator +	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2) $/;"	function	line:414	namespace:glm	signature:(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator -	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m, T scalar) $/;"	function	line:423	namespace:glm	signature:(mat<3, 3, T, Q> const& m, T scalar)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator -	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(T scalar, mat<3, 3, T, Q> const& m) $/;"	function	line:432	namespace:glm	signature:(T scalar, mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator -	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2) $/;"	function	line:441	namespace:glm	signature:(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator *	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m, T scalar) $/;"	function	line:450	namespace:glm	signature:(mat<3, 3, T, Q> const& m, T scalar)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator *	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(T scalar, mat<3, 3, T, Q> const& m) $/;"	function	line:459	namespace:glm	signature:(T scalar, mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator *	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type operator*(mat<3, 3, T, Q> const& m, typename mat<3, 3, T, Q>::row_type const& v) $/;"	function	line:468	namespace:glm	signature:(mat<3, 3, T, Q> const& m, typename mat<3, 3, T, Q>::row_type const& v)	returns:template GLM_FUNC_QUALIFIER typename mat <3, 3, T, Q> :: col_type 
operator *	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::row_type operator*(typename mat<3, 3, T, Q>::col_type const& v, mat<3, 3, T, Q> const& m) $/;"	function	line:477	namespace:glm	signature:(typename mat<3, 3, T, Q>::col_type const& v, mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER typename mat <3, 3, T, Q> :: row_type 
operator *	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2) $/;"	function	line:486	namespace:glm	signature:(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator *	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2) $/;"	function	line:522	namespace:glm	signature:(mat<3, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <2, 3, T, Q> 
operator *	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2) $/;"	function	line:534	namespace:glm	signature:(mat<3, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <4, 3, T, Q> 
operator /	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(mat<3, 3, T, Q> const& m,	T scalar) $/;"	function	line:552	namespace:glm	signature:(mat<3, 3, T, Q> const& m, T scalar)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator /	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(T scalar, mat<3, 3, T, Q> const& m) $/;"	function	line:561	namespace:glm	signature:(T scalar, mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator /	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::col_type operator\/(mat<3, 3, T, Q> const& m, typename mat<3, 3, T, Q>::row_type const& v) $/;"	function	line:570	namespace:glm	signature:(mat<3, 3, T, Q> const& m, typename mat<3, 3, T, Q>::row_type const& v)	returns:template GLM_FUNC_QUALIFIER typename mat <3, 3, T, Q> :: col_type 
operator /	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<3, 3, T, Q>::row_type operator\/(typename mat<3, 3, T, Q>::col_type const& v, mat<3, 3, T, Q> const& m) $/;"	function	line:576	namespace:glm	signature:(typename mat<3, 3, T, Q>::col_type const& v, mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER typename mat <3, 3, T, Q> :: row_type 
operator /	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> operator\/(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2) $/;"	function	line:582	namespace:glm	signature:(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <3, 3, T, Q> 
operator ==	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2) $/;"	function	line:591	namespace:glm	signature:(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
operator !=	/usr/include/glm/detail/type_mat3x3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER bool operator!=(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2) $/;"	function	line:597	namespace:glm	signature:(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER bool 
FIRST_PRINTABLE_CHAR	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^#define FIRST_PRINTABLE_CHAR ((char)32)$/;"	macro	line:8
LAST_PRINTABLE_CHAR	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^#define LAST_PRINTABLE_CHAR ((char)126)$/;"	macro	line:9
MAX_TEXTURE_RES	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^#define MAX_TEXTURE_RES 4096$/;"	macro	line:10
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^namespace BARE2D {$/;"	namespace	line:12
CharacterGlyph	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^	struct CharacterGlyph {$/;"	struct	line:18	namespace:BARE2D
character	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		char character;$/;"	member	line:19	struct:BARE2D::CharacterGlyph	access:public
uvRect	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		glm::vec4 uvRect;$/;"	member	line:20	struct:BARE2D::CharacterGlyph	access:public
size	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		glm::vec2 size;$/;"	member	line:21	struct:BARE2D::CharacterGlyph	access:public
Font	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^	class Font$/;"	class	line:28	namespace:BARE2D
Font	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		Font();$/;"	prototype	line:31	class:BARE2D::Font	access:public	signature:()
~Font	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		~Font();$/;"	prototype	line:32	class:BARE2D::Font	access:public	signature:()
init	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		void init(const char* fontFile, int size);$/;"	prototype	line:39	class:BARE2D::Font	access:public	signature:(const char* fontFile, int size)	returns:void 
dispose	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		void dispose();$/;"	prototype	line:44	class:BARE2D::Font	access:public	signature:()	returns:void 
getHeight	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		unsigned int getHeight() const {$/;"	function	line:46	class:BARE2D::Font	access:public	signature:() const	returns:unsigned int 
getGlyph	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		CharacterGlyph* getGlyph(int& index) {$/;"	function	line:55	class:BARE2D::Font	access:public	signature:(int& index)	returns:CharacterGlyph 
getTextureID	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		GLuint getTextureID() const {$/;"	function	line:62	class:BARE2D::Font	access:public	signature:() const	returns:GLuint 
getCharacters	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		unsigned int getCharacters() const {$/;"	function	line:69	class:BARE2D::Font	access:public	signature:() const	returns:unsigned int 
measure	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		glm::vec2 measure(const char* s);$/;"	prototype	line:78	class:BARE2D::Font	access:public	signature:(const char* s)	returns:glm :: vec2 
createRows	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		static std::vector<int>* createRows(glm::ivec4* rectangles, int rectanglesLength, int rows, int padding, int& width);$/;"	prototype	line:81	class:BARE2D::Font	access:private	signature:(glm::ivec4* rectangles, int rectanglesLength, int rows, int padding, int& width)	returns:std :: vector <int> 
m_textureID	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		GLuint m_textureID = 0;$/;"	member	line:84	class:BARE2D::Font	access:private
m_height	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		unsigned int m_height;$/;"	member	line:87	class:BARE2D::Font	access:private
m_regStart	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		unsigned int m_regStart, m_regLength;$/;"	member	line:90	class:BARE2D::Font	access:private
m_regLength	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		unsigned int m_regStart, m_regLength;$/;"	member	line:90	class:BARE2D::Font	access:private
m_characterGlyphs	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Font.hpp	/^		CharacterGlyph* m_characterGlyphs = nullptr;$/;"	member	line:93	class:BARE2D::Font	access:private
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^namespace BARE2D {$/;"	namespace	line:7
LuaScript	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^	class LuaScript$/;"	class	line:14	namespace:BARE2D
LuaScript	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		LuaScript();$/;"	prototype	line:17	class:BARE2D::LuaScript	access:public	signature:()
~LuaScript	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		~LuaScript();$/;"	prototype	line:18	class:BARE2D::LuaScript	access:public	signature:()
m_script	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		std::string m_script;$/;"	member	line:21	class:BARE2D::LuaScript	access:public
m_path	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		std::string m_path;$/;"	member	line:22	class:BARE2D::LuaScript	access:public
inited	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		bool inited = false;$/;"	member	line:24	class:BARE2D::LuaScript	access:public
LuaScriptContextWrapper	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^	class LuaScriptContextWrapper {$/;"	class	line:32	namespace:BARE2D
LuaScriptContextWrapper	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		LuaScriptContextWrapper();$/;"	prototype	line:34	class:BARE2D::LuaScriptContextWrapper	access:public	signature:()
~LuaScriptContextWrapper	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		~LuaScriptContextWrapper();$/;"	prototype	line:35	class:BARE2D::LuaScriptContextWrapper	access:public	signature:()
init	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		void init(lua_State* parentState, LuaScript* script);$/;"	prototype	line:42	class:BARE2D::LuaScriptContextWrapper	access:public	signature:(lua_State* parentState, LuaScript* script)	returns:void 
destroy	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		void destroy();$/;"	prototype	line:47	class:BARE2D::LuaScriptContextWrapper	access:public	signature:()	returns:void 
start	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		void start();$/;"	prototype	line:52	class:BARE2D::LuaScriptContextWrapper	access:public	signature:()	returns:void 
update	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		void update();$/;"	prototype	line:57	class:BARE2D::LuaScriptContextWrapper	access:public	signature:()	returns:void 
isCompleted	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		bool isCompleted();$/;"	prototype	line:62	class:BARE2D::LuaScriptContextWrapper	access:public	signature:()	returns:bool 
loadLua	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		void loadLua(std::string& luaStr);$/;"	prototype	line:69	class:BARE2D::LuaScriptContextWrapper	access:protected	signature:(std::string& luaStr)	returns:void 
createThread	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		void createThread();$/;"	prototype	line:74	class:BARE2D::LuaScriptContextWrapper	access:protected	signature:()	returns:void 
m_state	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		lua_State* m_state = nullptr;$/;"	member	line:77	class:BARE2D::LuaScriptContextWrapper	access:protected
m_parent	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		lua_State* m_parent = nullptr;$/;"	member	line:79	class:BARE2D::LuaScriptContextWrapper	access:protected
m_yielded	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		bool m_yielded = false;$/;"	member	line:82	class:BARE2D::LuaScriptContextWrapper	access:protected
m_remainingDelay	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		unsigned int m_remainingDelay = 0;$/;"	member	line:83	class:BARE2D::LuaScriptContextWrapper	access:protected
m_completed	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		bool m_completed = false;$/;"	member	line:86	class:BARE2D::LuaScriptContextWrapper	access:protected
m_scriptReference	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		int m_scriptReference = LUA_REFNIL;$/;"	member	line:89	class:BARE2D::LuaScriptContextWrapper	access:protected
m_threadReference	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/LuaScript.hpp	/^		int m_threadReference = LUA_REFNIL;$/;"	member	line:91	class:BARE2D::LuaScriptContextWrapper	access:protected


BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Texture.hpp	/^namespace BARE2D$/;"	namespace	line:6
Texture	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Texture.hpp	/^	struct Texture {$/;"	struct	line:13	namespace:BARE2D
filepath	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Texture.hpp	/^		std::string filepath = "";$/;"	member	line:14	struct:BARE2D::Texture	access:public
id	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Texture.hpp	/^		GLuint id = 0;$/;"	member	line:15	struct:BARE2D::Texture	access:public
width	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Texture.hpp	/^		int width = 0; \/\/ width in pixels$/;"	member	line:16	struct:BARE2D::Texture	access:public
height	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Texture.hpp	/^		int height = 0; \/\/ height in pixels$/;"	member	line:17	struct:BARE2D::Texture	access:public
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^namespace BARE2D {$/;"	namespace	line:6
InputManager	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^	class InputManager$/;"	class	line:12	namespace:BARE2D
InputManager	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		InputManager();$/;"	prototype	line:15	class:BARE2D::InputManager	access:public	signature:()
~InputManager	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		~InputManager();$/;"	prototype	line:16	class:BARE2D::InputManager	access:public	signature:()
update	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		void update();$/;"	prototype	line:21	class:BARE2D::InputManager	access:public	signature:()	returns:void 
pressKey	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		void pressKey(unsigned int keyID);$/;"	prototype	line:27	class:BARE2D::InputManager	access:public	signature:(unsigned int keyID)	returns:void 
releaseKey	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		void releaseKey(unsigned int keyID);$/;"	prototype	line:33	class:BARE2D::InputManager	access:public	signature:(unsigned int keyID)	returns:void 
setMousePosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		void setMousePosition(float x, float y);$/;"	prototype	line:40	class:BARE2D::InputManager	access:public	signature:(float x, float y)	returns:void 
setMousePosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		void setMousePosition(glm::vec2 position);$/;"	prototype	line:46	class:BARE2D::InputManager	access:public	signature:(glm::vec2 position)	returns:void 
setMouseScrollwheelPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		void setMouseScrollwheelPosition(int position);$/;"	prototype	line:52	class:BARE2D::InputManager	access:public	signature:(int position)	returns:void 
isKeyDown	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		bool isKeyDown(unsigned int keyID) const;$/;"	prototype	line:59	class:BARE2D::InputManager	access:public	signature:(unsigned int keyID) const	returns:bool 
isKeyPressed	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		bool isKeyPressed(unsigned int keyID) const;$/;"	prototype	line:66	class:BARE2D::InputManager	access:public	signature:(unsigned int keyID) const	returns:bool 
getMousePosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		glm::vec2 getMousePosition() const;$/;"	prototype	line:72	class:BARE2D::InputManager	access:public	signature:() const	returns:glm :: vec2 
getMouseScrollwheelPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		int getMouseScrollwheelPosition() const;$/;"	prototype	line:78	class:BARE2D::InputManager	access:public	signature:() const	returns:int 
wasKeyDown	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		bool wasKeyDown(unsigned int keyID) const;$/;"	prototype	line:86	class:BARE2D::InputManager	access:private	signature:(unsigned int keyID) const	returns:bool 
m_keyMap	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		std::unordered_map<unsigned int, bool> m_keyMap;$/;"	member	line:88	class:BARE2D::InputManager	access:private
m_previousKeyMap	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		std::unordered_map<unsigned int, bool> m_previousKeyMap;$/;"	member	line:89	class:BARE2D::InputManager	access:private
m_mousePosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		glm::vec2 m_mousePosition;$/;"	member	line:90	class:BARE2D::InputManager	access:private
m_mouseScrollwheelPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/InputManager.hpp	/^		int m_mouseScrollwheelPosition = 0;$/;"	member	line:91	class:BARE2D::InputManager	access:private
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^namespace BARE2D {$/;"	namespace	line:10
BasicRenderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^	class BasicRenderer : public Renderer$/;"	class	line:11	namespace:BARE2D	inherits:Renderer
BasicRenderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		BasicRenderer(std::string& fragShader, std::string& vertShader, unsigned int perspectiveWidth = 2, unsigned int perspectiveHeight = 2);$/;"	prototype	line:14	class:BARE2D::BasicRenderer	access:public	signature:(std::string& fragShader, std::string& vertShader, unsigned int perspectiveWidth = 2, unsigned int perspectiveHeight = 2)
~BasicRenderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		virtual ~BasicRenderer();$/;"	prototype	line:15	class:BARE2D::BasicRenderer	access:public	implementation:virtual	signature:()	returns:virtual 
init	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		virtual void init() override;$/;"	prototype	line:17	class:BARE2D::BasicRenderer	access:public	implementation:virtual	signature:()	returns:virtual void 
preRender	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		virtual void preRender() override;$/;"	prototype	line:18	class:BARE2D::BasicRenderer	access:public	implementation:virtual	signature:()	returns:virtual void 
setCamera	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		virtual void setCamera(std::shared_ptr<Camera2D> camera);$/;"	prototype	line:24	class:BARE2D::BasicRenderer	access:public	implementation:virtual	signature:(std::shared_ptr<Camera2D> camera)	returns:virtual void 
getCamera	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		std::shared_ptr<Camera2D> getCamera();$/;"	prototype	line:29	class:BARE2D::BasicRenderer	access:public	signature:()	returns:std :: shared_ptr <Camera2D> 
draw	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		virtual void draw(glm::vec4 destRect, glm::vec4 uvRect, GLuint texture, float depth, Colour colour = Colour(255, 255, 255, 255), float angle = 0.0f, glm::vec2 COR = glm::vec2(0.5f));$/;"	prototype	line:31	class:BARE2D::BasicRenderer	access:public	implementation:virtual	signature:(glm::vec4 destRect, glm::vec4 uvRect, GLuint texture, float depth, Colour colour = Colour(255, 255, 255, 255), float angle = 0.0f, glm::vec2 COR = glm::vec2(0.5f))	returns:virtual void 
createRenderBatches	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		virtual void createRenderBatches() override;$/;"	prototype	line:34	class:BARE2D::BasicRenderer	access:protected	implementation:virtual	signature:()	returns:virtual void 
m_fragShader	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		std::string m_fragShader, m_vertShader;$/;"	member	line:36	class:BARE2D::BasicRenderer	access:protected
m_vertShader	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		std::string m_fragShader, m_vertShader;$/;"	member	line:36	class:BARE2D::BasicRenderer	access:protected
m_glyphs	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		std::vector<Glyph*> m_glyphs;$/;"	member	line:38	class:BARE2D::BasicRenderer	access:protected
m_camera	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BasicRenderer.hpp	/^		std::shared_ptr<Camera2D> m_camera;$/;"	member	line:40	class:BARE2D::BasicRenderer	access:protected

BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Sound.hpp	/^namespace BARE2D {$/;"	namespace	line:5
Sound	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Sound.hpp	/^	struct Sound {$/;"	struct	line:7	namespace:BARE2D
chunk	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Sound.hpp	/^		Mix_Chunk* chunk = nullptr;$/;"	member	line:8	struct:BARE2D::Sound	access:public

glm	/usr/include/glm/detail/type_mat4x4.inl	/^namespace glm$/;"	namespace	line:3
mat	/usr/include/glm/detail/type_mat4x4.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat() $/;"	function	line:9	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 4, T, P> const& m) $/;"	function	line:25	class:glm::mat	signature:(mat<4, 4, T, P> const& m)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(T const& s) $/;"	function	line:39	class:glm::mat	signature:(T const& s)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat $/;"	function	line:53	class:glm::mat	signature:( T const& x0, T const& y0, T const& z0, T const& w0, T const& x1, T const& y1, T const& z1, T const& w1, T const& x2, T const& y2, T const& z2, T const& w2, T const& x3, T const& y3, T const& z3, T const& w3 )	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(col_type const& v0, col_type const& v1, col_type const& v2, col_type const& v3) $/;"	function	line:77	class:glm::mat	signature:(col_type const& v0, col_type const& v1, col_type const& v2, col_type const& v3)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 4, U, P> const& m) $/;"	function	line:92	class:glm::mat	signature:(mat<4, 4, U, P> const& m)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template< 		typename X1, typename Y1, typename Z1, typename W1, 		typename X2, typename Y2, typename Z2, typename W2, 		typename X3, typename Y3, typename Z3, typename W3, 		typename X4, typename Y4, typename Z4, typename W4> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat $/;"	function	line:113	class:glm::mat	signature:( X1 const& x1, Y1 const& y1, Z1 const& z1, W1 const& w1, X2 const& x2, Y2 const& y2, Z2 const& z2, W2 const& w2, X3 const& x3, Y3 const& y3, Z3 const& z3, W3 const& w3, X4 const& x4, Y4 const& y4, Z4 const& z4, W4 const& w4 )	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename V1, typename V2, typename V3, typename V4> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> const& v2, vec<4, V3, Q> const& v3, vec<4, V4, Q> const& v4) $/;"	function	line:154	class:glm::mat	signature:(vec<4, V1, Q> const& v1, vec<4, V2, Q> const& v2, vec<4, V3, Q> const& v3, vec<4, V4, Q> const& v4)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 2, T, Q> const& m) $/;"	function	line:175	class:glm::mat	signature:(mat<2, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 3, T, Q> const& m) $/;"	function	line:189	class:glm::mat	signature:(mat<3, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 3, T, Q> const& m) $/;"	function	line:203	class:glm::mat	signature:(mat<2, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 2, T, Q> const& m) $/;"	function	line:217	class:glm::mat	signature:(mat<3, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 4, T, Q> const& m) $/;"	function	line:231	class:glm::mat	signature:(mat<2, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 2, T, Q> const& m) $/;"	function	line:245	class:glm::mat	signature:(mat<4, 2, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 4, T, Q> const& m) $/;"	function	line:259	class:glm::mat	signature:(mat<3, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
mat	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 3, T, Q> const& m) $/;"	function	line:273	class:glm::mat	signature:(mat<4, 3, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat <4, 4, T, Q> :: 
operator []	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type & mat<4, 4, T, Q>::operator[](typename mat<4, 4, T, Q>::length_type i) $/;"	function	line:289	class:glm::mat	signature:(typename mat<4, 4, T, Q>::length_type i)	returns:template GLM_FUNC_QUALIFIER typename mat <4, 4, T, Q> :: col_type mat <4, 4, T, Q> :: 
operator []	/usr/include/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::col_type const& mat<4, 4, T, Q>::operator[](typename mat<4, 4, T, Q>::length_type i) const$/;"	function	line:296	class:glm::mat	signature:(typename mat<4, 4, T, Q>::length_type i) const
operator =	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator=(mat<4, 4, U, Q> const& m) $/;"	function	line:306	class:glm::mat	signature:(mat<4, 4, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator +=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(U s) $/;"	function	line:319	class:glm::mat	signature:(U s)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator +=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(mat<4, 4, U, Q> const& m) $/;"	function	line:330	class:glm::mat	signature:(mat<4, 4, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator -=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(U s) $/;"	function	line:341	class:glm::mat	signature:(U s)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator -=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(mat<4, 4, U, Q> const& m) $/;"	function	line:352	class:glm::mat	signature:(mat<4, 4, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator *=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(U s) $/;"	function	line:363	class:glm::mat	signature:(U s)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator *=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(mat<4, 4, U, Q> const& m) $/;"	function	line:374	class:glm::mat	signature:(mat<4, 4, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator /=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator\/=(U s) $/;"	function	line:381	class:glm::mat	signature:(U s)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator /=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator\/=(mat<4, 4, U, Q> const& m) $/;"	function	line:392	class:glm::mat	signature:(mat<4, 4, U, Q> const& m)	returns:template template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator ++	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator++() $/;"	function	line:400	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator --	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator--() $/;"	function	line:410	class:glm::mat	signature:()	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator ++	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat<4, 4, T, Q>::operator++(int) $/;"	function	line:420	class:glm::mat	signature:(int)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator --	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat<4, 4, T, Q>::operator--(int) $/;"	function	line:428	class:glm::mat	signature:(int)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> mat <4, 4, T, Q> :: 
operator +	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m) $/;"	function	line:438	namespace:glm	signature:(mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator -	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m) $/;"	function	line:444	namespace:glm	signature:(mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator +	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m, T const& s) $/;"	function	line:456	namespace:glm	signature:(mat<4, 4, T, Q> const& m, T const& s)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator +	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(T const& s, mat<4, 4, T, Q> const& m) $/;"	function	line:466	namespace:glm	signature:(T const& s, mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator +	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2) $/;"	function	line:476	namespace:glm	signature:(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator -	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m, T const& s) $/;"	function	line:486	namespace:glm	signature:(mat<4, 4, T, Q> const& m, T const& s)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator -	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(T const& s, mat<4, 4, T, Q> const& m) $/;"	function	line:496	namespace:glm	signature:(T const& s, mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator -	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2) $/;"	function	line:506	namespace:glm	signature:(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator *	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m, T const  & s) $/;"	function	line:516	namespace:glm	signature:(mat<4, 4, T, Q> const& m, T const & s)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator *	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(T const& s, mat<4, 4, T, Q> const& m) $/;"	function	line:526	namespace:glm	signature:(T const& s, mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator *	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type operator* $/;"	function	line:536	namespace:glm	signature:( mat<4, 4, T, Q> const& m, typename mat<4, 4, T, Q>::row_type const& v )	returns:template GLM_FUNC_QUALIFIER typename mat <4, 4, T, Q> :: col_type 
operator *	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::row_type operator* $/;"	function	line:584	namespace:glm	signature:( typename mat<4, 4, T, Q>::col_type const& v, mat<4, 4, T, Q> const& m )	returns:template GLM_FUNC_QUALIFIER typename mat <4, 4, T, Q> :: row_type 
operator *	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2) $/;"	function	line:598	namespace:glm	signature:(mat<4, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <2, 4, T, Q> 
operator *	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2) $/;"	function	line:612	namespace:glm	signature:(mat<4, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <3, 4, T, Q> 
operator *	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2) $/;"	function	line:630	namespace:glm	signature:(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator /	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(mat<4, 4, T, Q> const& m, T const& s) $/;"	function	line:651	namespace:glm	signature:(mat<4, 4, T, Q> const& m, T const& s)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator /	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(T const& s,	mat<4, 4, T, Q> const& m) $/;"	function	line:661	namespace:glm	signature:(T const& s, mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator /	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::col_type operator\/(mat<4, 4, T, Q> const& m, typename mat<4, 4, T, Q>::row_type const& v) $/;"	function	line:671	namespace:glm	signature:(mat<4, 4, T, Q> const& m, typename mat<4, 4, T, Q>::row_type const& v)	returns:template GLM_FUNC_QUALIFIER typename mat <4, 4, T, Q> :: col_type 
operator /	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER typename mat<4, 4, T, Q>::row_type operator\/(typename mat<4, 4, T, Q>::col_type const& v, mat<4, 4, T, Q> const& m) $/;"	function	line:677	namespace:glm	signature:(typename mat<4, 4, T, Q>::col_type const& v, mat<4, 4, T, Q> const& m)	returns:template GLM_FUNC_QUALIFIER typename mat <4, 4, T, Q> :: row_type 
operator /	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> operator\/(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2) $/;"	function	line:683	namespace:glm	signature:(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER mat <4, 4, T, Q> 
operator ==	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER bool operator==(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2) $/;"	function	line:692	namespace:glm	signature:(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER bool 
operator !=	/usr/include/glm/detail/type_mat4x4.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER bool operator!=(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2) $/;"	function	line:698	namespace:glm	signature:(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)	returns:template GLM_FUNC_QUALIFIER bool 

BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/MutableTexture.hpp	/^namespace BARE2D {$/;"	namespace	line:7
MutableTexture	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/MutableTexture.hpp	/^	struct MutableTexture : public Texture$/;"	struct	line:13	namespace:BARE2D	inherits:Texture
setData	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/MutableTexture.hpp	/^		void setData(unsigned char* data, GLenum format = GL_RGBA);$/;"	prototype	line:20	struct:BARE2D::MutableTexture	access:public	signature:(unsigned char* data, GLenum format = GL_RGBA)	returns:void 
setData	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/MutableTexture.hpp	/^		void setData(unsigned char* data, unsigned int xOffset, unsigned int yOffset, unsigned int subWidth, unsigned int subHeight, GLenum format = GL_RGBA);$/;"	prototype	line:31	struct:BARE2D::MutableTexture	access:public	signature:(unsigned char* data, unsigned int xOffset, unsigned int yOffset, unsigned int subWidth, unsigned int subHeight, GLenum format = GL_RGBA)	returns:void 
demangle	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^extern std::string demangle(const char* mangled);$/;"	prototype	line:12	signature:(const char* mangled)	returns:std :: string 
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^namespace BARE2D$/;"	namespace	line:14
BAREError	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	enum class BAREError {$/;"	cenum	line:19
SDL_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SDL_FAILURE,$/;"	enumerator	line:20	cenum:BARE2D::BAREError
GL_FAILURE_VERSION	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		GL_FAILURE_VERSION,$/;"	enumerator	line:21	cenum:BARE2D::BAREError
DOUBLE_INIT	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		DOUBLE_INIT,$/;"	enumerator	line:22	cenum:BARE2D::BAREError
GLEW_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		GLEW_FAILURE,$/;"	enumerator	line:23	cenum:BARE2D::BAREError
FILE_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		FILE_FAILURE,$/;"	enumerator	line:24	cenum:BARE2D::BAREError
TEXTURE_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		TEXTURE_FAILURE,$/;"	enumerator	line:25	cenum:BARE2D::BAREError
VERTEX_SHADER_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		VERTEX_SHADER_FAILURE,$/;"	enumerator	line:26	cenum:BARE2D::BAREError
FRAGMENT_SHADER_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		FRAGMENT_SHADER_FAILURE,$/;"	enumerator	line:27	cenum:BARE2D::BAREError
UNIFORM_NOT_FOUND	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		UNIFORM_NOT_FOUND,$/;"	enumerator	line:28	cenum:BARE2D::BAREError
SHADER_COMPILE_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SHADER_COMPILE_FAILURE,$/;"	enumerator	line:29	cenum:BARE2D::BAREError
SHADER_LINK_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SHADER_LINK_FAILURE,$/;"	enumerator	line:30	cenum:BARE2D::BAREError
GLSL_PROGRAM_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		GLSL_PROGRAM_FAILURE,$/;"	enumerator	line:31	cenum:BARE2D::BAREError
FONT_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		FONT_FAILURE,$/;"	enumerator	line:32	cenum:BARE2D::BAREError
FBO_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		FBO_FAILURE,$/;"	enumerator	line:33	cenum:BARE2D::BAREError
LOGGER_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		LOGGER_FAILURE,$/;"	enumerator	line:34	cenum:BARE2D::BAREError
XML_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		XML_FAILURE,$/;"	enumerator	line:35	cenum:BARE2D::BAREError
UNINITIALIZED_FUNCTION	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		UNINITIALIZED_FUNCTION,$/;"	enumerator	line:36	cenum:BARE2D::BAREError
LUA_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		LUA_FAILURE,$/;"	enumerator	line:37	cenum:BARE2D::BAREError
SDL_MIXER_FLAC_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SDL_MIXER_FLAC_FAILURE,$/;"	enumerator	line:38	cenum:BARE2D::BAREError
SDL_MIXER_OGG_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SDL_MIXER_OGG_FAILURE,$/;"	enumerator	line:39	cenum:BARE2D::BAREError
SDL_MIXER_MP3_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SDL_MIXER_MP3_FAILURE,$/;"	enumerator	line:40	cenum:BARE2D::BAREError
SDL_MIXER_MOD_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SDL_MIXER_MOD_FAILURE,$/;"	enumerator	line:41	cenum:BARE2D::BAREError
SDL_MIXER_CLOSE_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SDL_MIXER_CLOSE_FAILURE,$/;"	enumerator	line:42	cenum:BARE2D::BAREError
SDL_MIXER_LOAD_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SDL_MIXER_LOAD_FAILURE,$/;"	enumerator	line:43	cenum:BARE2D::BAREError
SDL_MIXER_SOUND_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		SDL_MIXER_SOUND_FAILURE,$/;"	enumerator	line:44	cenum:BARE2D::BAREError
OTHER_ERROR	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		OTHER_ERROR,$/;"	enumerator	line:45	cenum:BARE2D::BAREError
CACHE_FAILURE	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^		CACHE_FAILURE$/;"	enumerator	line:46	cenum:BARE2D::BAREError
GLErrorSeverity	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	enum class GLErrorSeverity { NOTIF, LOW, MED, HIGH, UNKNOWN };$/;"	cenum	line:49
NOTIF	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	enum class GLErrorSeverity { NOTIF, LOW, MED, HIGH, UNKNOWN };$/;"	enumerator	line:49	cenum:BARE2D::GLErrorSeverity
LOW	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	enum class GLErrorSeverity { NOTIF, LOW, MED, HIGH, UNKNOWN };$/;"	enumerator	line:49	cenum:BARE2D::GLErrorSeverity
MED	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	enum class GLErrorSeverity { NOTIF, LOW, MED, HIGH, UNKNOWN };$/;"	enumerator	line:49	cenum:BARE2D::GLErrorSeverity
HIGH	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	enum class GLErrorSeverity { NOTIF, LOW, MED, HIGH, UNKNOWN };$/;"	enumerator	line:49	cenum:BARE2D::GLErrorSeverity
UNKNOWN	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	enum class GLErrorSeverity { NOTIF, LOW, MED, HIGH, UNKNOWN };$/;"	enumerator	line:49	cenum:BARE2D::GLErrorSeverity
GLErrorMinSeverity	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	extern GLErrorSeverity GLErrorMinSeverity;$/;"	member	line:51	namespace:BARE2D
getErrString	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	extern std::string getErrString(BAREError err);$/;"	prototype	line:58	namespace:BARE2D	signature:(BAREError err)	returns:std :: string 
throwFatalError	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	extern void throwFatalError(BAREError err, std::string message = "");$/;"	prototype	line:65	namespace:BARE2D	signature:(BAREError err, std::string message = "")	returns:void 
throwError	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	extern void throwError(BAREError err, std::string message = "");$/;"	prototype	line:72	namespace:BARE2D	signature:(BAREError err, std::string message = "")	returns:void 
displayErrors	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	extern void displayErrors();$/;"	prototype	line:77	namespace:BARE2D	signature:()	returns:void 
initGLErrorCallback	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	extern void initGLErrorCallback(GLErrorSeverity minSeverity = GLErrorSeverity::NOTIF);$/;"	prototype	line:82	namespace:BARE2D	signature:(GLErrorSeverity minSeverity = GLErrorSeverity::NOTIF)	returns:void 
thrownErrors	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/BAREErrors.hpp	/^	extern std::vector<BAREError> thrownErrors;$/;"	member	line:84	namespace:BARE2D

glm	/usr/include/glm/detail/type_vec1.inl	/^namespace glm$/;"	namespace	line:5
vec	/usr/include/glm/detail/type_vec1.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec() $/;"	function	line:11	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> :: 
vec	/usr/include/glm/detail/type_vec1.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, T, Q> const& v) $/;"	function	line:18	class:glm::vec	signature:(vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> :: 
vec	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, T, P> const& v) $/;"	function	line:25	class:glm::vec	signature:(vec<1, T, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> :: 
vec	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(T scalar) $/;"	function	line:32	class:glm::vec	signature:(T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> :: 
vec	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, U, P> const& v) $/;"	function	line:40	class:glm::vec	signature:(vec<1, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> :: 
vec	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<2, U, P> const& v) $/;"	function	line:46	class:glm::vec	signature:(vec<2, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> :: 
vec	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<3, U, P> const& v) $/;"	function	line:52	class:glm::vec	signature:(vec<3, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> :: 
vec	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<4, U, P> const& v) $/;"	function	line:58	class:glm::vec	signature:(vec<4, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> :: 
operator []	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<1, T, Q>::operator[](typename vec<1, T, Q>::length_type) $/;"	function	line:65	class:glm::vec	signature:(typename vec<1, T, Q>::length_type)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR T vec <1, T, Q> :: 
operator []	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<1, T, Q>::operator[](typename vec<1, T, Q>::length_type) const $/;"	function	line:71	class:glm::vec	signature:(typename vec<1, T, Q>::length_type) const	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const vec <1, T, Q> :: 
operator =	/usr/include/glm/detail/type_vec1.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, T, Q> const& v) $/;"	function	line:80	class:glm::vec	signature:(vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator =	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, U, Q> const& v) $/;"	function	line:89	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator +=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator+=(U scalar) $/;"	function	line:97	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator +=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator+=(vec<1, U, Q> const& v) $/;"	function	line:105	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator -=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator-=(U scalar) $/;"	function	line:113	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator -=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator-=(vec<1, U, Q> const& v) $/;"	function	line:121	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator *=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator*=(U scalar) $/;"	function	line:129	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator *=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator*=(vec<1, U, Q> const& v) $/;"	function	line:137	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator /=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator\/=(U scalar) $/;"	function	line:145	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator /=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator\/=(vec<1, U, Q> const& v) $/;"	function	line:153	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator ++	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator++() $/;"	function	line:162	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator --	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator--() $/;"	function	line:169	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator ++	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> vec<1, T, Q>::operator++(int) $/;"	function	line:176	class:glm::vec	signature:(int)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator --	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> vec<1, T, Q>::operator--(int) $/;"	function	line:184	class:glm::vec	signature:(int)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator %=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator%=(U scalar) $/;"	function	line:195	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator %=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator%=(vec<1, U, Q> const& v) $/;"	function	line:203	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator &=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator&=(U scalar) $/;"	function	line:211	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator &=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator&=(vec<1, U, Q> const& v) $/;"	function	line:219	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator |=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator|=(U scalar) $/;"	function	line:227	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator |=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator|=(vec<1, U, Q> const& v) $/;"	function	line:235	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator ^=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator^=(U scalar) $/;"	function	line:243	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator ^=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator^=(vec<1, U, Q> const& v) $/;"	function	line:251	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator <<=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator<<=(U scalar) $/;"	function	line:259	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator <<=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator<<=(vec<1, U, Q> const& v) $/;"	function	line:267	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator >>=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator>>=(U scalar) $/;"	function	line:275	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator >>=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator>>=(vec<1, U, Q> const& v) $/;"	function	line:283	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> vec <1, T, Q> :: 
operator +	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v) $/;"	function	line:292	namespace:glm	signature:(vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator -	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v) $/;"	function	line:298	namespace:glm	signature:(vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator +	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v, T scalar) $/;"	function	line:307	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator +	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(T scalar, vec<1, T, Q> const& v) $/;"	function	line:314	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator +	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:321	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator -	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v, T scalar) $/;"	function	line:329	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator -	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(T scalar, vec<1, T, Q> const& v) $/;"	function	line:336	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator -	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:343	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator *	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(vec<1, T, Q> const& v, T scalar) $/;"	function	line:350	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator *	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(T scalar, vec<1, T, Q> const& v) $/;"	function	line:357	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator *	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:364	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator /	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(vec<1, T, Q> const& v, T scalar) $/;"	function	line:371	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator /	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(T scalar, vec<1, T, Q> const& v) $/;"	function	line:378	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator /	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:385	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator %	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(vec<1, T, Q> const& v, T scalar) $/;"	function	line:394	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator %	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(T scalar, vec<1, T, Q> const& v) $/;"	function	line:401	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator %	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:408	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator &	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(vec<1, T, Q> const& v, T scalar) $/;"	function	line:415	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator &	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(T scalar, vec<1, T, Q> const& v) $/;"	function	line:422	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator &	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:429	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator |	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(vec<1, T, Q> const& v, T scalar) $/;"	function	line:436	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator |	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(T scalar, vec<1, T, Q> const& v) $/;"	function	line:443	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator |	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:450	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator ^	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(vec<1, T, Q> const& v, T scalar) $/;"	function	line:457	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator ^	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(T scalar, vec<1, T, Q> const& v) $/;"	function	line:464	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator ^	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:471	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator <<	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(vec<1, T, Q> const& v, T scalar) $/;"	function	line:478	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator <<	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(T scalar, vec<1, T, Q> const& v) $/;"	function	line:485	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator <<	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:492	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator >>	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(vec<1, T, Q> const& v, T scalar) $/;"	function	line:499	namespace:glm	signature:(vec<1, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator >>	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(T scalar, vec<1, T, Q> const& v) $/;"	function	line:506	namespace:glm	signature:(T scalar, vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator >>	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:513	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator ~	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator~(vec<1, T, Q> const& v) $/;"	function	line:520	namespace:glm	signature:(vec<1, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, T, Q> 
operator ==	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:529	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
operator !=	/usr/include/glm/detail/type_vec1.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2) $/;"	function	line:535	namespace:glm	signature:(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
operator &&	/usr/include/glm/detail/type_vec1.inl	/^	template<qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, bool, Q> operator&&(vec<1, bool, Q> const& v1, vec<1, bool, Q> const& v2) $/;"	function	line:541	namespace:glm	signature:(vec<1, bool, Q> const& v1, vec<1, bool, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, bool, Q> 
operator ||	/usr/include/glm/detail/type_vec1.inl	/^	template<qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, bool, Q> operator||(vec<1, bool, Q> const& v1, vec<1, bool, Q> const& v2) $/;"	function	line:547	namespace:glm	signature:(vec<1, bool, Q> const& v1, vec<1, bool, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <1, bool, Q> 
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^namespace BARE2D$/;"	namespace	line:8
Cache	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^	template<typename S, typename T> 	class Cache $/;"	class	line:16	namespace:BARE2D
Cache	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		Cache<S, T>() {}$/;"	function	line:19	class:BARE2D::Cache	access:public	signature:()
findItem	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		T* findItem(S& key);$/;"	prototype	line:26	class:BARE2D::Cache	access:public	signature:(S& key)	returns:T 
operator []	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		T* operator[](S& key);$/;"	prototype	line:32	class:BARE2D::Cache	access:public	signature:(S& key)	returns:T 
addItem	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		bool addItem(S& key, T* item);$/;"	prototype	line:40	class:BARE2D::Cache	access:public	signature:(S& key, T* item)	returns:bool 
createItem	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		T* createItem(S& key, std::function<T*()> creationFunc = []()->T* { return new T(); });$/;"	prototype	line:48	class:BARE2D::Cache	access:public	signature:(S& key, std::function<T*()> creationFunc = []()->T* { return new T(); })	returns:T 
clear	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		void clear();$/;"	prototype	line:53	class:BARE2D::Cache	access:public	signature:()	returns:void 
getCount	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		unsigned int getCount();$/;"	prototype	line:58	class:BARE2D::Cache	access:public	signature:()	returns:unsigned int 
begin	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		typename std::unordered_map<S, T*>::iterator begin();$/;"	prototype	line:61	class:BARE2D::Cache	access:public	signature:()	returns:typename std :: unordered_map <S, T*> :: iterator 
end	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		typename std::unordered_map<S, T*>::iterator end();$/;"	prototype	line:62	class:BARE2D::Cache	access:public	signature:()	returns:typename std :: unordered_map <S, T*> :: iterator 
operator !=	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		bool operator!=(Cache& other);$/;"	prototype	line:63	class:BARE2D::Cache	access:public	signature:(Cache& other)	returns:bool 
m_data	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache.hpp	/^		std::unordered_map<S, T*> m_data;$/;"	member	line:66	class:BARE2D::Cache	access:private
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Music.hpp	/^namespace BARE2D {$/;"	namespace	line:5
Music	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Music.hpp	/^	struct Music {$/;"	struct	line:7	namespace:BARE2D
music	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Music.hpp	/^		Mix_Music* music = nullptr;$/;"	member	line:8	struct:BARE2D::Music	access:public
glm	/usr/include/glm/detail/type_vec3.inl	/^namespace glm$/;"	namespace	line:5
vec	/usr/include/glm/detail/type_vec3.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec() $/;"	function	line:11	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, T, Q> const& v) $/;"	function	line:18	class:glm::vec	signature:(vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, T, P> const& v) $/;"	function	line:25	class:glm::vec	signature:(vec<3, T, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T scalar) $/;"	function	line:32	class:glm::vec	signature:(T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template <typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T _x, T _y, T _z) $/;"	function	line:37	class:glm::vec	signature:(T _x, T _y, T _z)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, U, P> const& v) $/;"	function	line:45	class:glm::vec	signature:(vec<1, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, Y _y, Z _z) $/;"	function	line:53	class:glm::vec	signature:(X _x, Y _y, Z _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z) $/;"	function	line:61	class:glm::vec	signature:(vec<1, X, Q> const& _x, Y _y, Z _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z) $/;"	function	line:69	class:glm::vec	signature:(X _x, vec<1, Y, Q> const& _y, Z _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z) $/;"	function	line:77	class:glm::vec	signature:(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z) $/;"	function	line:85	class:glm::vec	signature:(X _x, Y _y, vec<1, Z, Q> const& _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z) $/;"	function	line:93	class:glm::vec	signature:(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z) $/;"	function	line:101	class:glm::vec	signature:(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename X, typename Y, typename Z> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z) $/;"	function	line:109	class:glm::vec	signature:(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<2, A, P> const& _xy, B _z) $/;"	function	line:119	class:glm::vec	signature:(vec<2, A, P> const& _xy, B _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z) $/;"	function	line:127	class:glm::vec	signature:(vec<2, A, P> const& _xy, vec<1, B, P> const& _z)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(A _x, vec<2, B, P> const& _yz) $/;"	function	line:135	class:glm::vec	signature:(A _x, vec<2, B, P> const& _yz)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename A, typename B, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz) $/;"	function	line:143	class:glm::vec	signature:(vec<1, A, P> const& _x, vec<2, B, P> const& _yz)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, U, P> const& v) $/;"	function	line:151	class:glm::vec	signature:(vec<3, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
vec	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U, qualifier P> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<4, U, P> const& v) $/;"	function	line:159	class:glm::vec	signature:(vec<4, U, P> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> :: 
operator []	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<3, T, Q>::operator[](typename vec<3, T, Q>::length_type i) $/;"	function	line:168	class:glm::vec	signature:(typename vec<3, T, Q>::length_type i)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR T vec <3, T, Q> :: 
operator []	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<3, T, Q>::operator[](typename vec<3, T, Q>::length_type i) const $/;"	function	line:184	class:glm::vec	signature:(typename vec<3, T, Q>::length_type i) const	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const vec <3, T, Q> :: 
operator =	/usr/include/glm/detail/type_vec3.inl	/^		template<typename T, qualifier Q> 		GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, T, Q> const& v) $/;"	function	line:203	class:glm::vec	signature:(vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator =	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, U, Q> const& v) $/;"	function	line:214	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator +=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(U scalar) $/;"	function	line:224	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator +=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<1, U, Q> const& v) $/;"	function	line:234	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator +=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<3, U, Q> const& v) $/;"	function	line:244	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator -=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(U scalar) $/;"	function	line:254	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator -=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<1, U, Q> const& v) $/;"	function	line:264	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator -=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<3, U, Q> const& v) $/;"	function	line:274	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator *=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(U scalar) $/;"	function	line:284	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator *=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<1, U, Q> const& v) $/;"	function	line:294	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator *=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<3, U, Q> const& v) $/;"	function	line:304	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator /=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(U v) $/;"	function	line:314	class:glm::vec	signature:(U v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator /=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(vec<1, U, Q> const& v) $/;"	function	line:324	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator /=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(vec<3, U, Q> const& v) $/;"	function	line:334	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator ++	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator++() $/;"	function	line:345	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator --	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator--() $/;"	function	line:354	class:glm::vec	signature:()	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator ++	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> vec<3, T, Q>::operator++(int) $/;"	function	line:363	class:glm::vec	signature:(int)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator --	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> vec<3, T, Q>::operator--(int) $/;"	function	line:371	class:glm::vec	signature:(int)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator %=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(U scalar) $/;"	function	line:382	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator %=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<1, U, Q> const& v) $/;"	function	line:392	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator %=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<3, U, Q> const& v) $/;"	function	line:402	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator &=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(U scalar) $/;"	function	line:412	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator &=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<1, U, Q> const& v) $/;"	function	line:422	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator &=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<3, U, Q> const& v) $/;"	function	line:432	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator |=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(U scalar) $/;"	function	line:442	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator |=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<1, U, Q> const& v) $/;"	function	line:452	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator |=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<3, U, Q> const& v) $/;"	function	line:462	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator ^=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(U scalar) $/;"	function	line:472	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator ^=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<1, U, Q> const& v) $/;"	function	line:482	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator ^=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<3, U, Q> const& v) $/;"	function	line:492	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator <<=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(U scalar) $/;"	function	line:502	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator <<=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<1, U, Q> const& v) $/;"	function	line:512	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator <<=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<3, U, Q> const& v) $/;"	function	line:522	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator >>=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(U scalar) $/;"	function	line:532	class:glm::vec	signature:(U scalar)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator >>=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<1, U, Q> const& v) $/;"	function	line:542	class:glm::vec	signature:(vec<1, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator >>=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	template<typename U> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<3, U, Q> const& v) $/;"	function	line:552	class:glm::vec	signature:(vec<3, U, Q> const& v)	returns:template template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> vec <3, T, Q> :: 
operator +	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v) $/;"	function	line:563	namespace:glm	signature:(vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator -	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v) $/;"	function	line:569	namespace:glm	signature:(vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator +	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v, T scalar) $/;"	function	line:580	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator +	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:589	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator +	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(T scalar, vec<3, T, Q> const& v) $/;"	function	line:598	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator +	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:607	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator +	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:616	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator -	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v, T scalar) $/;"	function	line:625	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator -	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:634	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator -	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(T scalar, vec<3, T, Q> const& v) $/;"	function	line:643	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator -	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:652	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator -	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:661	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator *	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, T scalar) $/;"	function	line:670	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator *	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:679	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator *	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(T scalar, vec<3, T, Q> const& v) $/;"	function	line:688	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator *	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:697	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator *	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:706	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator /	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v, T scalar) $/;"	function	line:715	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator /	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:724	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator /	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(T scalar, vec<3, T, Q> const& v) $/;"	function	line:733	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator /	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:742	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator /	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:751	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator %	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v, T scalar) $/;"	function	line:762	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator %	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:771	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator %	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(T scalar, vec<3, T, Q> const& v) $/;"	function	line:780	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator %	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:789	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator %	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:798	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator &	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v, T scalar) $/;"	function	line:807	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator &	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:816	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator &	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(T scalar, vec<3, T, Q> const& v) $/;"	function	line:825	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator &	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:834	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator &	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:843	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator |	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v, T scalar) $/;"	function	line:852	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator |	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:861	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator |	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(T scalar, vec<3, T, Q> const& v) $/;"	function	line:870	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator |	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:879	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator |	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:888	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator ^	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v, T scalar) $/;"	function	line:897	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator ^	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:906	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator ^	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(T scalar, vec<3, T, Q> const& v) $/;"	function	line:915	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator ^	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:924	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator ^	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:933	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator <<	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v, T scalar) $/;"	function	line:942	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator <<	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:951	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator <<	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(T scalar, vec<3, T, Q> const& v) $/;"	function	line:960	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator <<	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:969	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator <<	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:978	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator >>	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v, T scalar) $/;"	function	line:987	namespace:glm	signature:(vec<3, T, Q> const& v, T scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator >>	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar) $/;"	function	line:996	namespace:glm	signature:(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator >>	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(T scalar, vec<3, T, Q> const& v) $/;"	function	line:1005	namespace:glm	signature:(T scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator >>	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v) $/;"	function	line:1014	namespace:glm	signature:(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator >>	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:1023	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator ~	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator~(vec<3, T, Q> const& v) $/;"	function	line:1032	namespace:glm	signature:(vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, T, Q> 
operator ==	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:1043	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
operator !=	/usr/include/glm/detail/type_vec3.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2) $/;"	function	line:1052	namespace:glm	signature:(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
operator &&	/usr/include/glm/detail/type_vec3.inl	/^	template<qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, bool, Q> operator&&(vec<3, bool, Q> const& v1, vec<3, bool, Q> const& v2) $/;"	function	line:1058	namespace:glm	signature:(vec<3, bool, Q> const& v1, vec<3, bool, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, bool, Q> 
operator ||	/usr/include/glm/detail/type_vec3.inl	/^	template<qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, bool, Q> operator||(vec<3, bool, Q> const& v1, vec<3, bool, Q> const& v2) $/;"	function	line:1064	namespace:glm	signature:(vec<3, bool, Q> const& v1, vec<3, bool, Q> const& v2)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <3, bool, Q> 
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^namespace BARE2D$/;"	namespace	line:6
findItem	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	template<typename S, typename T> 	T* Cache<S, T>::findItem(S& key) $/;"	function	line:10	class:BARE2D::Cache	signature:(S& key)	returns:template T Cache <S, T> :: 
operator []	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	template<typename S, typename T> 	T* Cache<S, T>::operator[](S& key) $/;"	function	line:24	class:BARE2D::Cache	signature:(S& key)	returns:template T Cache <S, T> :: 
addItem	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	template<typename S, typename T> 	bool Cache<S, T>::addItem(S& key, T* item) $/;"	function	line:30	class:BARE2D::Cache	signature:(S& key, T* item)	returns:template bool Cache <S, T> :: 
createItem	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	template<typename S, typename T> 	T* Cache<S, T>::createItem(S& key, std::function<T*()> creationFunc) $/;"	function	line:38	class:BARE2D::Cache	signature:(S& key, std::function<T*()> creationFunc)	returns:template T Cache <S, T> :: 
clear	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	template<typename S, typename T> 	void Cache<S, T>::clear() $/;"	function	line:60	class:BARE2D::Cache	signature:()	returns:template void Cache <S, T> :: 
getCount	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	template<typename S, typename T> 	unsigned int Cache<S, T>::getCount() $/;"	function	line:73	class:BARE2D::Cache	signature:()	returns:template unsigned int Cache <S, T> :: 
begin	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	typename std::unordered_map<S, T*>::iterator Cache<S, T>::begin()$/;"	function	line:79	class:BARE2D::Cache	signature:()
end	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	typename std::unordered_map<S, T*>::iterator Cache<S, T>::end()$/;"	function	line:85	class:BARE2D::Cache	signature:()
operator !=	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Cache_impl.tcc	/^	template<typename S, typename T> 	bool Cache<S, T>::operator!=(Cache& other) $/;"	function	line:91	class:BARE2D::Cache	signature:(Cache& other)	returns:template bool Cache <S, T> :: 


BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^namespace BARE2D {$/;"	namespace	line:9
Renderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^	class Renderer$/;"	class	line:15	namespace:BARE2D
Renderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		Renderer();$/;"	prototype	line:18	class:BARE2D::Renderer	access:public	signature:()
~Renderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual ~Renderer();$/;"	prototype	line:19	class:BARE2D::Renderer	access:public	implementation:virtual	signature:()	returns:virtual 
begin	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual void begin();$/;"	prototype	line:24	class:BARE2D::Renderer	access:public	implementation:virtual	signature:()	returns:virtual void 
end	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual void end();$/;"	prototype	line:29	class:BARE2D::Renderer	access:public	implementation:virtual	signature:()	returns:virtual void 
init	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual void init();$/;"	prototype	line:34	class:BARE2D::Renderer	access:public	implementation:virtual	signature:()	returns:virtual void 
initUniforms	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual void initUniforms();$/;"	prototype	line:39	class:BARE2D::Renderer	access:public	implementation:virtual	signature:()	returns:virtual void 
destroy	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual void destroy();$/;"	prototype	line:44	class:BARE2D::Renderer	access:public	implementation:virtual	signature:()	returns:virtual void 
render	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual void render();$/;"	prototype	line:49	class:BARE2D::Renderer	access:public	implementation:virtual	signature:()	returns:virtual void 
getShader	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		ShaderProgram* getShader();$/;"	prototype	line:51	class:BARE2D::Renderer	access:public	signature:()	returns:ShaderProgram 
preRender	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual void preRender() {};$/;"	function	line:57	class:BARE2D::Renderer	access:protected	implementation:virtual	signature:()	returns:virtual void 
createRenderBatches	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		virtual void createRenderBatches() = 0;$/;"	prototype	line:62	class:BARE2D::Renderer	access:protected	implementation:pure virtual	signature:()	returns:virtual void 
m_shader	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		ShaderProgram m_shader; \/\/ The shader to draw with.$/;"	member	line:64	class:BARE2D::Renderer	access:protected
m_vertexArrayObject	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		VAO m_vertexArrayObject; \/\/ Holds all of the vertex buffer object info - the actual uploaded information.$/;"	member	line:65	class:BARE2D::Renderer	access:protected
m_batches	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Renderer.hpp	/^		std::vector<RenderBatch> m_batches; \/\/ Holds all glyphs (a renderbatch is equal to a drawn sprite, for example)$/;"	member	line:66	class:BARE2D::Renderer	access:protected
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^namespace BARE2D {$/;"	namespace	line:8
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<class T> 	void ShaderProgram::setUniform(const std::string uniform, T* data, unsigned int num) { $/;"	function	line:10	class:BARE2D::ShaderProgram	signature:(const std::string uniform, T* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniformMatrix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<class T> 	void ShaderProgram::setUniformMatrix(const std::string uniform, bool transpose, T* data, unsigned int num) { $/;"	function	line:15	class:BARE2D::ShaderProgram	signature:(const std::string uniform, bool transpose, T* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<int>(const std::string uniform, int* data, unsigned int num); $/;"	prototype	line:22	class:BARE2D::ShaderProgram	signature:(const std::string uniform, int* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<unsigned int>(const std::string uniform, unsigned int* data, unsigned int num); $/;"	prototype	line:24	class:BARE2D::ShaderProgram	signature:(const std::string uniform, unsigned int* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<float>(const std::string uniform, float* data, unsigned int num); $/;"	prototype	line:26	class:BARE2D::ShaderProgram	signature:(const std::string uniform, float* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<glm::vec2>(const std::string uniform, glm::vec2* data, unsigned int num); $/;"	prototype	line:28	class:BARE2D::ShaderProgram	signature:(const std::string uniform, glm::vec2* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<glm::vec3>(const std::string uniform, glm::vec3* data, unsigned int num); $/;"	prototype	line:30	class:BARE2D::ShaderProgram	signature:(const std::string uniform, glm::vec3* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<glm::vec4>(const std::string uniform, glm::vec4* data, unsigned int num) ; $/;"	prototype	line:32	class:BARE2D::ShaderProgram	signature:(const std::string uniform, glm::vec4* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<glm::ivec2>(const std::string uniform, glm::ivec2* data, unsigned int num) ; $/;"	prototype	line:34	class:BARE2D::ShaderProgram	signature:(const std::string uniform, glm::ivec2* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<glm::ivec3>(const std::string uniform, glm::ivec3* data, unsigned int num); $/;"	prototype	line:36	class:BARE2D::ShaderProgram	signature:(const std::string uniform, glm::ivec3* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniform<glm::ivec4>(const std::string uniform, glm::ivec4* data, unsigned int num) ; $/;"	prototype	line:38	class:BARE2D::ShaderProgram	signature:(const std::string uniform, glm::ivec4* data, unsigned int num)	returns:template void ShaderProgram :: 
setUniformMatrix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.tcc	/^	template<> 	void ShaderProgram::setUniformMatrix<glm::mat4>(const std::string uniform, bool transpose, glm::mat4* data, unsigned int num); $/;"	prototype	line:40	class:BARE2D::ShaderProgram	signature:(const std::string uniform, bool transpose, glm::mat4* data, unsigned int num)	returns:template void ShaderProgram :: 
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^namespace BARE2D {$/;"	namespace	line:10
Line	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^	struct Line {$/;"	struct	line:12	namespace:BARE2D
construct	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		void construct(glm::vec2 p0, glm::vec2 p1, float& thick, Colour& col);$/;"	prototype	line:13	struct:BARE2D::Line	access:public	signature:(glm::vec2 p0, glm::vec2 p1, float& thick, Colour& col)	returns:void 
point0	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		glm::vec2 point0;$/;"	member	line:15	struct:BARE2D::Line	access:public
point1	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		glm::vec2 point1;$/;"	member	line:16	struct:BARE2D::Line	access:public
thickness	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		float thickness;$/;"	member	line:17	struct:BARE2D::Line	access:public
colour	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		Colour colour;$/;"	member	line:18	struct:BARE2D::Line	access:public
Circle	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^	struct Circle {$/;"	struct	line:21	namespace:BARE2D
construct	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		void construct(glm::vec2& p0, float& lineThick, float& radius, Colour& fillCol);$/;"	prototype	line:22	struct:BARE2D::Circle	access:public	signature:(glm::vec2& p0, float& lineThick, float& radius, Colour& fillCol)	returns:void 
origin	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		glm::vec2 origin;$/;"	member	line:24	struct:BARE2D::Circle	access:public
lines	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		std::vector<Line> lines;$/;"	member	line:25	struct:BARE2D::Circle	access:public
Rectangle	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^	struct Rectangle {$/;"	struct	line:28	namespace:BARE2D
construct	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		void construct(glm::vec4& posSize, float& lineThick, Colour& fillCol);$/;"	prototype	line:29	struct:BARE2D::Rectangle	access:public	signature:(glm::vec4& posSize, float& lineThick, Colour& fillCol)	returns:void 
destRect	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		glm::vec4 destRect;$/;"	member	line:31	struct:BARE2D::Rectangle	access:public
lines	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		Line lines[2];$/;"	member	line:32	struct:BARE2D::Rectangle	access:public
DebugRenderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^	class DebugRenderer : public Renderer$/;"	class	line:35	namespace:BARE2D	inherits:Renderer
DebugRenderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		DebugRenderer();$/;"	prototype	line:38	class:BARE2D::DebugRenderer	access:public	signature:()
~DebugRenderer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		virtual ~DebugRenderer();$/;"	prototype	line:39	class:BARE2D::DebugRenderer	access:public	implementation:virtual	signature:()	returns:virtual 
init	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		virtual void init() override;$/;"	prototype	line:44	class:BARE2D::DebugRenderer	access:public	implementation:virtual	signature:()	returns:virtual void 
begin	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		virtual void begin() override;$/;"	prototype	line:46	class:BARE2D::DebugRenderer	access:public	implementation:virtual	signature:()	returns:virtual void 
render	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		virtual void render() override;$/;"	prototype	line:48	class:BARE2D::DebugRenderer	access:public	implementation:virtual	signature:()	returns:virtual void 
drawLine	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		virtual void drawLine(glm::vec2 point0, glm::vec2 point1, float thickness, Colour colour);$/;"	prototype	line:57	class:BARE2D::DebugRenderer	access:public	implementation:virtual	signature:(glm::vec2 point0, glm::vec2 point1, float thickness, Colour colour)	returns:virtual void 
drawCircle	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		virtual void drawCircle(glm::vec2 centre, float lineThickness, float radius, Colour fillColour = Colour(255, 255, 255, 255));$/;"	prototype	line:67	class:BARE2D::DebugRenderer	access:public	implementation:virtual	signature:(glm::vec2 centre, float lineThickness, float radius, Colour fillColour = Colour(255, 255, 255, 255))	returns:virtual void 
drawRectangle	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		virtual void drawRectangle(glm::vec4 destRect, float lineThickness, Colour fillColour = Colour(255, 255, 255, 255));$/;"	prototype	line:75	class:BARE2D::DebugRenderer	access:public	implementation:virtual	signature:(glm::vec4 destRect, float lineThickness, Colour fillColour = Colour(255, 255, 255, 255))	returns:virtual void 
createRenderBatches	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		virtual void createRenderBatches() override;$/;"	prototype	line:78	class:BARE2D::DebugRenderer	access:protected	implementation:virtual	signature:()	returns:virtual void 
m_lines	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		std::vector<Line> m_lines;$/;"	member	line:80	class:BARE2D::DebugRenderer	access:protected
m_circles	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		std::vector<Circle> m_circles;$/;"	member	line:81	class:BARE2D::DebugRenderer	access:protected
m_rectangles	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/DebugRenderer.hpp	/^		std::vector<Rectangle> m_rectangles;$/;"	member	line:82	class:BARE2D::DebugRenderer	access:protected
_ASM_GENERIC_ERRNO_BASE_H	/usr/include/asm-generic/errno-base.h	/^#define _ASM_GENERIC_ERRNO_BASE_H$/;"	macro	line:3
EPERM	/usr/include/asm-generic/errno-base.h	/^#define	EPERM		 1	\/* Operation not permitted *\/$/;"	macro	line:5
ENOENT	/usr/include/asm-generic/errno-base.h	/^#define	ENOENT		 2	\/* No such file or directory *\/$/;"	macro	line:6
ESRCH	/usr/include/asm-generic/errno-base.h	/^#define	ESRCH		 3	\/* No such process *\/$/;"	macro	line:7
EINTR	/usr/include/asm-generic/errno-base.h	/^#define	EINTR		 4	\/* Interrupted system call *\/$/;"	macro	line:8
EIO	/usr/include/asm-generic/errno-base.h	/^#define	EIO		 5	\/* I\/O error *\/$/;"	macro	line:9
ENXIO	/usr/include/asm-generic/errno-base.h	/^#define	ENXIO		 6	\/* No such device or address *\/$/;"	macro	line:10
E2BIG	/usr/include/asm-generic/errno-base.h	/^#define	E2BIG		 7	\/* Argument list too long *\/$/;"	macro	line:11
ENOEXEC	/usr/include/asm-generic/errno-base.h	/^#define	ENOEXEC		 8	\/* Exec format error *\/$/;"	macro	line:12
EBADF	/usr/include/asm-generic/errno-base.h	/^#define	EBADF		 9	\/* Bad file number *\/$/;"	macro	line:13
ECHILD	/usr/include/asm-generic/errno-base.h	/^#define	ECHILD		10	\/* No child processes *\/$/;"	macro	line:14
EAGAIN	/usr/include/asm-generic/errno-base.h	/^#define	EAGAIN		11	\/* Try again *\/$/;"	macro	line:15
ENOMEM	/usr/include/asm-generic/errno-base.h	/^#define	ENOMEM		12	\/* Out of memory *\/$/;"	macro	line:16
EACCES	/usr/include/asm-generic/errno-base.h	/^#define	EACCES		13	\/* Permission denied *\/$/;"	macro	line:17
EFAULT	/usr/include/asm-generic/errno-base.h	/^#define	EFAULT		14	\/* Bad address *\/$/;"	macro	line:18
ENOTBLK	/usr/include/asm-generic/errno-base.h	/^#define	ENOTBLK		15	\/* Block device required *\/$/;"	macro	line:19
EBUSY	/usr/include/asm-generic/errno-base.h	/^#define	EBUSY		16	\/* Device or resource busy *\/$/;"	macro	line:20
EEXIST	/usr/include/asm-generic/errno-base.h	/^#define	EEXIST		17	\/* File exists *\/$/;"	macro	line:21
EXDEV	/usr/include/asm-generic/errno-base.h	/^#define	EXDEV		18	\/* Cross-device link *\/$/;"	macro	line:22
ENODEV	/usr/include/asm-generic/errno-base.h	/^#define	ENODEV		19	\/* No such device *\/$/;"	macro	line:23
ENOTDIR	/usr/include/asm-generic/errno-base.h	/^#define	ENOTDIR		20	\/* Not a directory *\/$/;"	macro	line:24
EISDIR	/usr/include/asm-generic/errno-base.h	/^#define	EISDIR		21	\/* Is a directory *\/$/;"	macro	line:25
EINVAL	/usr/include/asm-generic/errno-base.h	/^#define	EINVAL		22	\/* Invalid argument *\/$/;"	macro	line:26
ENFILE	/usr/include/asm-generic/errno-base.h	/^#define	ENFILE		23	\/* File table overflow *\/$/;"	macro	line:27
EMFILE	/usr/include/asm-generic/errno-base.h	/^#define	EMFILE		24	\/* Too many open files *\/$/;"	macro	line:28
ENOTTY	/usr/include/asm-generic/errno-base.h	/^#define	ENOTTY		25	\/* Not a typewriter *\/$/;"	macro	line:29
ETXTBSY	/usr/include/asm-generic/errno-base.h	/^#define	ETXTBSY		26	\/* Text file busy *\/$/;"	macro	line:30
EFBIG	/usr/include/asm-generic/errno-base.h	/^#define	EFBIG		27	\/* File too large *\/$/;"	macro	line:31
ENOSPC	/usr/include/asm-generic/errno-base.h	/^#define	ENOSPC		28	\/* No space left on device *\/$/;"	macro	line:32
ESPIPE	/usr/include/asm-generic/errno-base.h	/^#define	ESPIPE		29	\/* Illegal seek *\/$/;"	macro	line:33
EROFS	/usr/include/asm-generic/errno-base.h	/^#define	EROFS		30	\/* Read-only file system *\/$/;"	macro	line:34
EMLINK	/usr/include/asm-generic/errno-base.h	/^#define	EMLINK		31	\/* Too many links *\/$/;"	macro	line:35
EPIPE	/usr/include/asm-generic/errno-base.h	/^#define	EPIPE		32	\/* Broken pipe *\/$/;"	macro	line:36
EDOM	/usr/include/asm-generic/errno-base.h	/^#define	EDOM		33	\/* Math argument out of domain of func *\/$/;"	macro	line:37
ERANGE	/usr/include/asm-generic/errno-base.h	/^#define	ERANGE		34	\/* Math result not representable *\/$/;"	macro	line:38


_ASM_GENERIC_ERRNO_H	/usr/include/asm-generic/errno.h	/^#define _ASM_GENERIC_ERRNO_H$/;"	macro	line:3
EDEADLK	/usr/include/asm-generic/errno.h	/^#define	EDEADLK		35	\/* Resource deadlock would occur *\/$/;"	macro	line:7
ENAMETOOLONG	/usr/include/asm-generic/errno.h	/^#define	ENAMETOOLONG	36	\/* File name too long *\/$/;"	macro	line:8
ENOLCK	/usr/include/asm-generic/errno.h	/^#define	ENOLCK		37	\/* No record locks available *\/$/;"	macro	line:9
ENOSYS	/usr/include/asm-generic/errno.h	/^#define	ENOSYS		38	\/* Invalid system call number *\/$/;"	macro	line:18
ENOTEMPTY	/usr/include/asm-generic/errno.h	/^#define	ENOTEMPTY	39	\/* Directory not empty *\/$/;"	macro	line:20
ELOOP	/usr/include/asm-generic/errno.h	/^#define	ELOOP		40	\/* Too many symbolic links encountered *\/$/;"	macro	line:21
EWOULDBLOCK	/usr/include/asm-generic/errno.h	/^#define	EWOULDBLOCK	EAGAIN	\/* Operation would block *\/$/;"	macro	line:22
ENOMSG	/usr/include/asm-generic/errno.h	/^#define	ENOMSG		42	\/* No message of desired type *\/$/;"	macro	line:23
EIDRM	/usr/include/asm-generic/errno.h	/^#define	EIDRM		43	\/* Identifier removed *\/$/;"	macro	line:24
ECHRNG	/usr/include/asm-generic/errno.h	/^#define	ECHRNG		44	\/* Channel number out of range *\/$/;"	macro	line:25
EL2NSYNC	/usr/include/asm-generic/errno.h	/^#define	EL2NSYNC	45	\/* Level 2 not synchronized *\/$/;"	macro	line:26
EL3HLT	/usr/include/asm-generic/errno.h	/^#define	EL3HLT		46	\/* Level 3 halted *\/$/;"	macro	line:27
EL3RST	/usr/include/asm-generic/errno.h	/^#define	EL3RST		47	\/* Level 3 reset *\/$/;"	macro	line:28
ELNRNG	/usr/include/asm-generic/errno.h	/^#define	ELNRNG		48	\/* Link number out of range *\/$/;"	macro	line:29
EUNATCH	/usr/include/asm-generic/errno.h	/^#define	EUNATCH		49	\/* Protocol driver not attached *\/$/;"	macro	line:30
ENOCSI	/usr/include/asm-generic/errno.h	/^#define	ENOCSI		50	\/* No CSI structure available *\/$/;"	macro	line:31
EL2HLT	/usr/include/asm-generic/errno.h	/^#define	EL2HLT		51	\/* Level 2 halted *\/$/;"	macro	line:32
EBADE	/usr/include/asm-generic/errno.h	/^#define	EBADE		52	\/* Invalid exchange *\/$/;"	macro	line:33
EBADR	/usr/include/asm-generic/errno.h	/^#define	EBADR		53	\/* Invalid request descriptor *\/$/;"	macro	line:34
EXFULL	/usr/include/asm-generic/errno.h	/^#define	EXFULL		54	\/* Exchange full *\/$/;"	macro	line:35
ENOANO	/usr/include/asm-generic/errno.h	/^#define	ENOANO		55	\/* No anode *\/$/;"	macro	line:36
EBADRQC	/usr/include/asm-generic/errno.h	/^#define	EBADRQC		56	\/* Invalid request code *\/$/;"	macro	line:37
EBADSLT	/usr/include/asm-generic/errno.h	/^#define	EBADSLT		57	\/* Invalid slot *\/$/;"	macro	line:38
EDEADLOCK	/usr/include/asm-generic/errno.h	/^#define	EDEADLOCK	EDEADLK$/;"	macro	line:40
EBFONT	/usr/include/asm-generic/errno.h	/^#define	EBFONT		59	\/* Bad font file format *\/$/;"	macro	line:42
ENOSTR	/usr/include/asm-generic/errno.h	/^#define	ENOSTR		60	\/* Device not a stream *\/$/;"	macro	line:43
ENODATA	/usr/include/asm-generic/errno.h	/^#define	ENODATA		61	\/* No data available *\/$/;"	macro	line:44
ETIME	/usr/include/asm-generic/errno.h	/^#define	ETIME		62	\/* Timer expired *\/$/;"	macro	line:45
ENOSR	/usr/include/asm-generic/errno.h	/^#define	ENOSR		63	\/* Out of streams resources *\/$/;"	macro	line:46
ENONET	/usr/include/asm-generic/errno.h	/^#define	ENONET		64	\/* Machine is not on the network *\/$/;"	macro	line:47
ENOPKG	/usr/include/asm-generic/errno.h	/^#define	ENOPKG		65	\/* Package not installed *\/$/;"	macro	line:48
EREMOTE	/usr/include/asm-generic/errno.h	/^#define	EREMOTE		66	\/* Object is remote *\/$/;"	macro	line:49
ENOLINK	/usr/include/asm-generic/errno.h	/^#define	ENOLINK		67	\/* Link has been severed *\/$/;"	macro	line:50
EADV	/usr/include/asm-generic/errno.h	/^#define	EADV		68	\/* Advertise error *\/$/;"	macro	line:51
ESRMNT	/usr/include/asm-generic/errno.h	/^#define	ESRMNT		69	\/* Srmount error *\/$/;"	macro	line:52
ECOMM	/usr/include/asm-generic/errno.h	/^#define	ECOMM		70	\/* Communication error on send *\/$/;"	macro	line:53
EPROTO	/usr/include/asm-generic/errno.h	/^#define	EPROTO		71	\/* Protocol error *\/$/;"	macro	line:54
EMULTIHOP	/usr/include/asm-generic/errno.h	/^#define	EMULTIHOP	72	\/* Multihop attempted *\/$/;"	macro	line:55
EDOTDOT	/usr/include/asm-generic/errno.h	/^#define	EDOTDOT		73	\/* RFS specific error *\/$/;"	macro	line:56
EBADMSG	/usr/include/asm-generic/errno.h	/^#define	EBADMSG		74	\/* Not a data message *\/$/;"	macro	line:57
EOVERFLOW	/usr/include/asm-generic/errno.h	/^#define	EOVERFLOW	75	\/* Value too large for defined data type *\/$/;"	macro	line:58
ENOTUNIQ	/usr/include/asm-generic/errno.h	/^#define	ENOTUNIQ	76	\/* Name not unique on network *\/$/;"	macro	line:59
EBADFD	/usr/include/asm-generic/errno.h	/^#define	EBADFD		77	\/* File descriptor in bad state *\/$/;"	macro	line:60
EREMCHG	/usr/include/asm-generic/errno.h	/^#define	EREMCHG		78	\/* Remote address changed *\/$/;"	macro	line:61
ELIBACC	/usr/include/asm-generic/errno.h	/^#define	ELIBACC		79	\/* Can not access a needed shared library *\/$/;"	macro	line:62
ELIBBAD	/usr/include/asm-generic/errno.h	/^#define	ELIBBAD		80	\/* Accessing a corrupted shared library *\/$/;"	macro	line:63
ELIBSCN	/usr/include/asm-generic/errno.h	/^#define	ELIBSCN		81	\/* .lib section in a.out corrupted *\/$/;"	macro	line:64
ELIBMAX	/usr/include/asm-generic/errno.h	/^#define	ELIBMAX		82	\/* Attempting to link in too many shared libraries *\/$/;"	macro	line:65
ELIBEXEC	/usr/include/asm-generic/errno.h	/^#define	ELIBEXEC	83	\/* Cannot exec a shared library directly *\/$/;"	macro	line:66
EILSEQ	/usr/include/asm-generic/errno.h	/^#define	EILSEQ		84	\/* Illegal byte sequence *\/$/;"	macro	line:67
ERESTART	/usr/include/asm-generic/errno.h	/^#define	ERESTART	85	\/* Interrupted system call should be restarted *\/$/;"	macro	line:68
ESTRPIPE	/usr/include/asm-generic/errno.h	/^#define	ESTRPIPE	86	\/* Streams pipe error *\/$/;"	macro	line:69
EUSERS	/usr/include/asm-generic/errno.h	/^#define	EUSERS		87	\/* Too many users *\/$/;"	macro	line:70
ENOTSOCK	/usr/include/asm-generic/errno.h	/^#define	ENOTSOCK	88	\/* Socket operation on non-socket *\/$/;"	macro	line:71
EDESTADDRREQ	/usr/include/asm-generic/errno.h	/^#define	EDESTADDRREQ	89	\/* Destination address required *\/$/;"	macro	line:72
EMSGSIZE	/usr/include/asm-generic/errno.h	/^#define	EMSGSIZE	90	\/* Message too long *\/$/;"	macro	line:73
EPROTOTYPE	/usr/include/asm-generic/errno.h	/^#define	EPROTOTYPE	91	\/* Protocol wrong type for socket *\/$/;"	macro	line:74
ENOPROTOOPT	/usr/include/asm-generic/errno.h	/^#define	ENOPROTOOPT	92	\/* Protocol not available *\/$/;"	macro	line:75
EPROTONOSUPPORT	/usr/include/asm-generic/errno.h	/^#define	EPROTONOSUPPORT	93	\/* Protocol not supported *\/$/;"	macro	line:76
ESOCKTNOSUPPORT	/usr/include/asm-generic/errno.h	/^#define	ESOCKTNOSUPPORT	94	\/* Socket type not supported *\/$/;"	macro	line:77
EOPNOTSUPP	/usr/include/asm-generic/errno.h	/^#define	EOPNOTSUPP	95	\/* Operation not supported on transport endpoint *\/$/;"	macro	line:78
EPFNOSUPPORT	/usr/include/asm-generic/errno.h	/^#define	EPFNOSUPPORT	96	\/* Protocol family not supported *\/$/;"	macro	line:79
EAFNOSUPPORT	/usr/include/asm-generic/errno.h	/^#define	EAFNOSUPPORT	97	\/* Address family not supported by protocol *\/$/;"	macro	line:80
EADDRINUSE	/usr/include/asm-generic/errno.h	/^#define	EADDRINUSE	98	\/* Address already in use *\/$/;"	macro	line:81
EADDRNOTAVAIL	/usr/include/asm-generic/errno.h	/^#define	EADDRNOTAVAIL	99	\/* Cannot assign requested address *\/$/;"	macro	line:82
ENETDOWN	/usr/include/asm-generic/errno.h	/^#define	ENETDOWN	100	\/* Network is down *\/$/;"	macro	line:83
ENETUNREACH	/usr/include/asm-generic/errno.h	/^#define	ENETUNREACH	101	\/* Network is unreachable *\/$/;"	macro	line:84
ENETRESET	/usr/include/asm-generic/errno.h	/^#define	ENETRESET	102	\/* Network dropped connection because of reset *\/$/;"	macro	line:85
ECONNABORTED	/usr/include/asm-generic/errno.h	/^#define	ECONNABORTED	103	\/* Software caused connection abort *\/$/;"	macro	line:86
ECONNRESET	/usr/include/asm-generic/errno.h	/^#define	ECONNRESET	104	\/* Connection reset by peer *\/$/;"	macro	line:87
ENOBUFS	/usr/include/asm-generic/errno.h	/^#define	ENOBUFS		105	\/* No buffer space available *\/$/;"	macro	line:88
EISCONN	/usr/include/asm-generic/errno.h	/^#define	EISCONN		106	\/* Transport endpoint is already connected *\/$/;"	macro	line:89
ENOTCONN	/usr/include/asm-generic/errno.h	/^#define	ENOTCONN	107	\/* Transport endpoint is not connected *\/$/;"	macro	line:90
ESHUTDOWN	/usr/include/asm-generic/errno.h	/^#define	ESHUTDOWN	108	\/* Cannot send after transport endpoint shutdown *\/$/;"	macro	line:91
ETOOMANYREFS	/usr/include/asm-generic/errno.h	/^#define	ETOOMANYREFS	109	\/* Too many references: cannot splice *\/$/;"	macro	line:92
ETIMEDOUT	/usr/include/asm-generic/errno.h	/^#define	ETIMEDOUT	110	\/* Connection timed out *\/$/;"	macro	line:93
ECONNREFUSED	/usr/include/asm-generic/errno.h	/^#define	ECONNREFUSED	111	\/* Connection refused *\/$/;"	macro	line:94
EHOSTDOWN	/usr/include/asm-generic/errno.h	/^#define	EHOSTDOWN	112	\/* Host is down *\/$/;"	macro	line:95
EHOSTUNREACH	/usr/include/asm-generic/errno.h	/^#define	EHOSTUNREACH	113	\/* No route to host *\/$/;"	macro	line:96
EALREADY	/usr/include/asm-generic/errno.h	/^#define	EALREADY	114	\/* Operation already in progress *\/$/;"	macro	line:97
EINPROGRESS	/usr/include/asm-generic/errno.h	/^#define	EINPROGRESS	115	\/* Operation now in progress *\/$/;"	macro	line:98
ESTALE	/usr/include/asm-generic/errno.h	/^#define	ESTALE		116	\/* Stale file handle *\/$/;"	macro	line:99
EUCLEAN	/usr/include/asm-generic/errno.h	/^#define	EUCLEAN		117	\/* Structure needs cleaning *\/$/;"	macro	line:100
ENOTNAM	/usr/include/asm-generic/errno.h	/^#define	ENOTNAM		118	\/* Not a XENIX named type file *\/$/;"	macro	line:101
ENAVAIL	/usr/include/asm-generic/errno.h	/^#define	ENAVAIL		119	\/* No XENIX semaphores available *\/$/;"	macro	line:102
EISNAM	/usr/include/asm-generic/errno.h	/^#define	EISNAM		120	\/* Is a named type file *\/$/;"	macro	line:103
EREMOTEIO	/usr/include/asm-generic/errno.h	/^#define	EREMOTEIO	121	\/* Remote I\/O error *\/$/;"	macro	line:104
EDQUOT	/usr/include/asm-generic/errno.h	/^#define	EDQUOT		122	\/* Quota exceeded *\/$/;"	macro	line:105
ENOMEDIUM	/usr/include/asm-generic/errno.h	/^#define	ENOMEDIUM	123	\/* No medium found *\/$/;"	macro	line:107
EMEDIUMTYPE	/usr/include/asm-generic/errno.h	/^#define	EMEDIUMTYPE	124	\/* Wrong medium type *\/$/;"	macro	line:108
ECANCELED	/usr/include/asm-generic/errno.h	/^#define	ECANCELED	125	\/* Operation Canceled *\/$/;"	macro	line:109
ENOKEY	/usr/include/asm-generic/errno.h	/^#define	ENOKEY		126	\/* Required key not available *\/$/;"	macro	line:110
EKEYEXPIRED	/usr/include/asm-generic/errno.h	/^#define	EKEYEXPIRED	127	\/* Key has expired *\/$/;"	macro	line:111
EKEYREVOKED	/usr/include/asm-generic/errno.h	/^#define	EKEYREVOKED	128	\/* Key has been revoked *\/$/;"	macro	line:112
EKEYREJECTED	/usr/include/asm-generic/errno.h	/^#define	EKEYREJECTED	129	\/* Key was rejected by service *\/$/;"	macro	line:113
EOWNERDEAD	/usr/include/asm-generic/errno.h	/^#define	EOWNERDEAD	130	\/* Owner died *\/$/;"	macro	line:116
ENOTRECOVERABLE	/usr/include/asm-generic/errno.h	/^#define	ENOTRECOVERABLE	131	\/* State not recoverable *\/$/;"	macro	line:117
ERFKILL	/usr/include/asm-generic/errno.h	/^#define ERFKILL		132	\/* Operation not possible due to RF-kill *\/$/;"	macro	line:119
EHWPOISON	/usr/include/asm-generic/errno.h	/^#define EHWPOISON	133	\/* Memory page has hardware error *\/$/;"	macro	line:121
glm	/usr/include/glm/ext/quaternion_trigonometric.inl	/^namespace glm$/;"	namespace	line:3
angle	/usr/include/glm/ext/quaternion_trigonometric.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER T angle(qua<T, Q> const& x) $/;"	function	line:6	namespace:glm	signature:(qua<T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER T 
axis	/usr/include/glm/ext/quaternion_trigonometric.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<3, T, Q> axis(qua<T, Q> const& x) $/;"	function	line:17	namespace:glm	signature:(qua<T, Q> const& x)	returns:template GLM_FUNC_QUALIFIER vec <3, T, Q> 
angleAxis	/usr/include/glm/ext/quaternion_trigonometric.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER qua<T, Q> angleAxis(T const& angle, vec<3, T, Q> const& v) $/;"	function	line:27	namespace:glm	signature:(T const& angle, vec<3, T, Q> const& v)	returns:template GLM_FUNC_QUALIFIER qua <T, Q> 
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^namespace BARE2D {$/;"	namespace	line:5
CameraState	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^	struct CameraState {$/;"	struct	line:11	namespace:BARE2D
position	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^		glm::vec2 position = glm::vec2(0.0f);$/;"	member	line:12	struct:BARE2D::CameraState	access:public
scale	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^		glm::vec2 scale = glm::vec2(1.0f);$/;"	member	line:13	struct:BARE2D::CameraState	access:public
Camera2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^	class Camera2D {$/;"	class	line:20	namespace:BARE2D
Camera2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			Camera2D();$/;"	prototype	line:22	class:BARE2D::Camera2D	access:public	signature:()
~Camera2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			~Camera2D();$/;"	prototype	line:23	class:BARE2D::Camera2D	access:public	signature:()
init	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			void init(float screenWidth, float screenHeight);$/;"	prototype	line:30	class:BARE2D::Camera2D	access:public	signature:(float screenWidth, float screenHeight)	returns:void 
update	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			void update();$/;"	prototype	line:35	class:BARE2D::Camera2D	access:public	signature:()	returns:void 
getScreenSpaceFromViewSpace	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::vec4 getScreenSpaceFromViewSpace(glm::vec4 destRect);$/;"	prototype	line:42	class:BARE2D::Camera2D	access:public	signature:(glm::vec4 destRect)	returns:glm :: vec4 
getViewSpaceFromScreenSpace	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::vec4 getViewSpaceFromScreenSpace(glm::vec4 destRect);$/;"	prototype	line:49	class:BARE2D::Camera2D	access:public	signature:(glm::vec4 destRect)	returns:glm :: vec4 
getScreenPositionFromViewedPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::vec2 getScreenPositionFromViewedPosition(glm::vec2 viewedPosition);$/;"	prototype	line:54	class:BARE2D::Camera2D	access:public	signature:(glm::vec2 viewedPosition)	returns:glm :: vec2 
getViewedPositionFromScreenPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::vec2 getViewedPositionFromScreenPosition(glm::vec2 screenPosition);$/;"	prototype	line:59	class:BARE2D::Camera2D	access:public	signature:(glm::vec2 screenPosition)	returns:glm :: vec2 
getScreenSizeFromViewedSize	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::vec2 getScreenSizeFromViewedSize(glm::vec2 viewedSize);$/;"	prototype	line:64	class:BARE2D::Camera2D	access:public	signature:(glm::vec2 viewedSize)	returns:glm :: vec2 
getViewedSizeFromScreenSize	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::vec2 getViewedSizeFromScreenSize(glm::vec2 screenSize);$/;"	prototype	line:69	class:BARE2D::Camera2D	access:public	signature:(glm::vec2 screenSize)	returns:glm :: vec2 
setPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			void setPosition(glm::vec2 newPos);$/;"	prototype	line:75	class:BARE2D::Camera2D	access:public	signature:(glm::vec2 newPos)	returns:void 
offsetPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			void offsetPosition(glm::vec2 offset);$/;"	prototype	line:81	class:BARE2D::Camera2D	access:public	signature:(glm::vec2 offset)	returns:void 
setScale	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			void setScale(float newScaleX, float newScaleY);$/;"	prototype	line:88	class:BARE2D::Camera2D	access:public	signature:(float newScaleX, float newScaleY)	returns:void 
offsetScale	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			void offsetScale(float offsetX, float offsetY);$/;"	prototype	line:95	class:BARE2D::Camera2D	access:public	signature:(float offsetX, float offsetY)	returns:void 
getScreenWidth	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			float getScreenWidth() const;$/;"	prototype	line:100	class:BARE2D::Camera2D	access:public	signature:() const	returns:float 
getScreenHeight	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			float getScreenHeight() const;$/;"	prototype	line:104	class:BARE2D::Camera2D	access:public	signature:() const	returns:float 
getPosition	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::vec2 getPosition() const;$/;"	prototype	line:108	class:BARE2D::Camera2D	access:public	signature:() const	returns:glm :: vec2 
getScaleX	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			float getScaleX() const;$/;"	prototype	line:112	class:BARE2D::Camera2D	access:public	signature:() const	returns:float 
getScaleY	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			float getScaleY() const;$/;"	prototype	line:113	class:BARE2D::Camera2D	access:public	signature:() const	returns:float 
getCameraMatrix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			const glm::mat4& getCameraMatrix() const;$/;"	prototype	line:117	class:BARE2D::Camera2D	access:public	signature:() const	returns:const glm :: mat4 
isRectInScene	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			bool isRectInScene(glm::vec4& rectangle);$/;"	prototype	line:124	class:BARE2D::Camera2D	access:public	signature:(glm::vec4& rectangle)	returns:bool 
getState	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			CameraState getState();$/;"	prototype	line:129	class:BARE2D::Camera2D	access:public	signature:()	returns:CameraState 
getLastState	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			CameraState getLastState();$/;"	prototype	line:133	class:BARE2D::Camera2D	access:public	signature:()	returns:CameraState 
m_screenWidth	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			float m_screenWidth, m_screenHeight;$/;"	member	line:137	class:BARE2D::Camera2D	access:private
m_screenHeight	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			float m_screenWidth, m_screenHeight;$/;"	member	line:137	class:BARE2D::Camera2D	access:private
m_state	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			CameraState m_state;$/;"	member	line:139	class:BARE2D::Camera2D	access:private
m_lastState	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			CameraState m_lastState;$/;"	member	line:141	class:BARE2D::Camera2D	access:private
m_cameraMatrix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::mat4 m_cameraMatrix, m_orthographicMatrix;$/;"	member	line:144	class:BARE2D::Camera2D	access:private
m_orthographicMatrix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			glm::mat4 m_cameraMatrix, m_orthographicMatrix;$/;"	member	line:144	class:BARE2D::Camera2D	access:private
m_matrixNeedsUpdate	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Camera2D.hpp	/^			bool m_matrixNeedsUpdate = false;$/;"	member	line:146	class:BARE2D::Camera2D	access:private
glm	/usr/include/glm/ext/quaternion_relational.inl	/^namespace glm$/;"	namespace	line:1
equal	/usr/include/glm/ext/quaternion_relational.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y) $/;"	function	line:4	namespace:glm	signature:(qua<T, Q> const& x, qua<T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER vec <4, bool, Q> 
equal	/usr/include/glm/ext/quaternion_relational.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon) $/;"	function	line:13	namespace:glm	signature:(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)	returns:template GLM_FUNC_QUALIFIER vec <4, bool, Q> 
notEqual	/usr/include/glm/ext/quaternion_relational.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y) $/;"	function	line:20	namespace:glm	signature:(qua<T, Q> const& x, qua<T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER vec <4, bool, Q> 
notEqual	/usr/include/glm/ext/quaternion_relational.inl	/^	template<typename T, qualifier Q> 	GLM_FUNC_QUALIFIER vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon) $/;"	function	line:29	namespace:glm	signature:(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)	returns:template GLM_FUNC_QUALIFIER vec <4, bool, Q> 


BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^namespace BARE2D {$/;"	namespace	line:7
Window	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^	class Window$/;"	class	line:13	namespace:BARE2D
Window	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		Window();$/;"	prototype	line:16	class:BARE2D::Window	access:public	signature:()
~Window	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		~Window();$/;"	prototype	line:17	class:BARE2D::Window	access:public	signature:()
create	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		void create(unsigned int flags);$/;"	prototype	line:44	class:BARE2D::Window	access:public	signature:(unsigned int flags)	returns:void 
setTitle	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		void setTitle(std::string newTitle);$/;"	prototype	line:50	class:BARE2D::Window	access:public	signature:(std::string newTitle)	returns:void 
setSize	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		void setSize(unsigned int width, unsigned int height);$/;"	prototype	line:57	class:BARE2D::Window	access:public	signature:(unsigned int width, unsigned int height)	returns:void 
swapBuffer	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		void swapBuffer();$/;"	prototype	line:62	class:BARE2D::Window	access:public	signature:()	returns:void 
getWidth	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		unsigned int getWidth() const;$/;"	prototype	line:67	class:BARE2D::Window	access:public	signature:() const	returns:unsigned int 
getHeight	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		unsigned int getHeight() const;$/;"	prototype	line:72	class:BARE2D::Window	access:public	signature:() const	returns:unsigned int 
m_SDLWindow	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		SDL_Window* m_SDLWindow = nullptr;$/;"	member	line:75	class:BARE2D::Window	access:private
m_GLContext	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		SDL_GLContext m_GLContext = nullptr;$/;"	member	line:76	class:BARE2D::Window	access:private
m_width	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		unsigned int m_width = 600, m_height = 400;$/;"	member	line:78	class:BARE2D::Window	access:private
m_height	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		unsigned int m_width = 600, m_height = 400;$/;"	member	line:78	class:BARE2D::Window	access:private
m_title	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/Window.hpp	/^		std::string m_title = "BARE2D Window";$/;"	member	line:79	class:BARE2D::Window	access:private
glm	/usr/include/glm/detail/func_vector_relational.inl	/^namespace glm$/;"	namespace	line:1
lessThan	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> lessThan(vec<L, T, Q> const& x, vec<L, T, Q> const& y) $/;"	function	line:4	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, bool, Q> 
lessThanEqual	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> lessThanEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y) $/;"	function	line:13	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, bool, Q> 
greaterThan	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> greaterThan(vec<L, T, Q> const& x, vec<L, T, Q> const& y) $/;"	function	line:22	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, bool, Q> 
greaterThanEqual	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> greaterThanEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y) $/;"	function	line:31	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, bool, Q> 
equal	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y) $/;"	function	line:40	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, bool, Q> 
notEqual	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, typename T, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y) $/;"	function	line:49	namespace:glm	signature:(vec<L, T, Q> const& x, vec<L, T, Q> const& y)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, bool, Q> 
any	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool any(vec<L, bool, Q> const& v) $/;"	function	line:58	namespace:glm	signature:(vec<L, bool, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
all	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool all(vec<L, bool, Q> const& v) $/;"	function	line:67	namespace:glm	signature:(vec<L, bool, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool 
not_	/usr/include/glm/detail/func_vector_relational.inl	/^	template<length_t L, qualifier Q> 	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> not_(vec<L, bool, Q> const& v) $/;"	function	line:76	namespace:glm	signature:(vec<L, bool, Q> const& v)	returns:template GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec <L, bool, Q> 
BARE2D	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^namespace BARE2D {$/;"	namespace	line:8
ShaderProgram	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^	class ShaderProgram$/;"	class	line:14	namespace:BARE2D
ShaderProgram	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		ShaderProgram();$/;"	prototype	line:17	class:BARE2D::ShaderProgram	access:public	signature:()
~ShaderProgram	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		~ShaderProgram();$/;"	prototype	line:18	class:BARE2D::ShaderProgram	access:public	signature:()
compileShaders	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		void compileShaders(const char* vertexShaderPath, const char* fragmentShaderPath);$/;"	prototype	line:25	class:BARE2D::ShaderProgram	access:public	signature:(const char* vertexShaderPath, const char* fragmentShaderPath)	returns:void 
compileShadersFromSource	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		void compileShadersFromSource(const char* vertexSource, const char* fragmentSource);$/;"	prototype	line:32	class:BARE2D::ShaderProgram	access:public	signature:(const char* vertexSource, const char* fragmentSource)	returns:void 
linkShaders	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		void linkShaders(std::initializer_list<std::string> attributes);$/;"	prototype	line:38	class:BARE2D::ShaderProgram	access:public	signature:(std::initializer_list<std::string> attributes)	returns:void 
setUniform	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		template<class T> 		void setUniform(const std::string uniform, T* data, unsigned int num = 1); $/;"	prototype	line:46	class:BARE2D::ShaderProgram	access:public	signature:(const std::string uniform, T* data, unsigned int num = 1)	returns:template void 
setUniformMatrix	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		template<class T> 		void setUniformMatrix(const std::string uniform, bool transpose, T* data, unsigned int num = 1); $/;"	prototype	line:55	class:BARE2D::ShaderProgram	access:public	signature:(const std::string uniform, bool transpose, T* data, unsigned int num = 1)	returns:template void 
doesUniformExist	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		bool doesUniformExist(const std::string uniform);$/;"	prototype	line:61	class:BARE2D::ShaderProgram	access:public	signature:(const std::string uniform)	returns:bool 
bindFragOutputLocation	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		void bindFragOutputLocation(std::string outputVariableName, unsigned int location);$/;"	prototype	line:68	class:BARE2D::ShaderProgram	access:public	signature:(std::string outputVariableName, unsigned int location)	returns:void 
use	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		void use();$/;"	prototype	line:73	class:BARE2D::ShaderProgram	access:public	signature:()	returns:void 
unuse	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		void unuse();$/;"	prototype	line:78	class:BARE2D::ShaderProgram	access:public	signature:()	returns:void 
destroy	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		void destroy();$/;"	prototype	line:83	class:BARE2D::ShaderProgram	access:public	signature:()	returns:void 
m_numberAttributes	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		unsigned int m_numberAttributes = 0;$/;"	member	line:86	class:BARE2D::ShaderProgram	access:private
m_programID	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		GLuint m_programID;$/;"	member	line:88	class:BARE2D::ShaderProgram	access:private
m_vertexShaderID	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		GLuint m_vertexShaderID;$/;"	member	line:89	class:BARE2D::ShaderProgram	access:private
m_fragmentShaderID	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		GLuint m_fragmentShaderID;$/;"	member	line:90	class:BARE2D::ShaderProgram	access:private
compileShaderFromSource	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		void compileShaderFromSource(const char* source, const std::string& name, GLuint id);$/;"	prototype	line:98	class:BARE2D::ShaderProgram	access:private	signature:(const char* source, const std::string& name, GLuint id)	returns:void 
getUniformLocation	/home/davis-dev/Documents/Programming/C++/CodingGithub/BARE2DEngine/Source/ShaderProgram.hpp	/^		GLint getUniformLocation(const std::string& uniform);$/;"	prototype	line:105	class:BARE2D::ShaderProgram	access:private	signature:(const std::string& uniform)	returns:GLint 


